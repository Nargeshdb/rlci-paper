/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.master;

import java.util.Date;
import org.apache.hadoop.hbase.ServerName;
import org.apache.hadoop.hbase.client.RegionInfo;
import org.apache.yetus.audience.InterfaceAudience;
import org.apache.yetus.audience.InterfaceStability;
import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;
import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;
import org.apache.hadoop.hbase.shaded.protobuf.generated.ClusterStatusProtos;

/**
 * State of a Region while undergoing transitions.
 * This class is immutable.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class RegionState {

    public enum State {

        // region is in an offline state
        OFFLINE,
        // server has begun to open but not yet done
        OPENING,
        // server opened region and updated meta
        OPEN,
        // server has begun to close but not yet done
        CLOSING,
        // server closed region and updated meta
        CLOSED,
        // server started split of a region
        SPLITTING,
        // server completed split of a region
        SPLIT,
        // failed to open, and won't retry any more
        FAILED_OPEN,
        // failed to close, and won't retry any more
        FAILED_CLOSE,
        // server started merge a region
        MERGING,
        // server completed merge a region
        MERGED,
        // new region to be created when RS splits a parent
        SPLITTING_NEW,
        // region but hasn't be created yet, or master doesn't
        // know it's already created
        // new region to be created when RS merges two
        MERGING_NEW,
        // daughter regions but hasn't be created yet, or
        // master doesn't know it's already created
        // the region is CLOSED because of a RS crashes. Usually it is the same
        ABNORMALLY_CLOSED;

        // with CLOSED, but for some operations such as merge/split, we can not
        // apply it to a region in this state, as it may lead to data loss as we
        // may have some data in recovered edits.
        @org.checkerframework.dataflow.qual.Pure
        public boolean matches(State... expected) {
            for (State state : expected) {
                if (this == state) {
                    return true;
                }
            }
            return false;
        }

        /**
         * Convert to protobuf ClusterStatusProtos.RegionState.State
         */
        @org.checkerframework.dataflow.qual.Pure
        public ClusterStatusProtos.RegionState.State convert() {
            ClusterStatusProtos.RegionState.State rs;
            switch(this) {
                case OFFLINE:
                    rs = ClusterStatusProtos.RegionState.State.OFFLINE;
                    break;
                case OPENING:
                    rs = ClusterStatusProtos.RegionState.State.OPENING;
                    break;
                case OPEN:
                    rs = ClusterStatusProtos.RegionState.State.OPEN;
                    break;
                case CLOSING:
                    rs = ClusterStatusProtos.RegionState.State.CLOSING;
                    break;
                case CLOSED:
                    rs = ClusterStatusProtos.RegionState.State.CLOSED;
                    break;
                case SPLITTING:
                    rs = ClusterStatusProtos.RegionState.State.SPLITTING;
                    break;
                case SPLIT:
                    rs = ClusterStatusProtos.RegionState.State.SPLIT;
                    break;
                case FAILED_OPEN:
                    rs = ClusterStatusProtos.RegionState.State.FAILED_OPEN;
                    break;
                case FAILED_CLOSE:
                    rs = ClusterStatusProtos.RegionState.State.FAILED_CLOSE;
                    break;
                case MERGING:
                    rs = ClusterStatusProtos.RegionState.State.MERGING;
                    break;
                case MERGED:
                    rs = ClusterStatusProtos.RegionState.State.MERGED;
                    break;
                case SPLITTING_NEW:
                    rs = ClusterStatusProtos.RegionState.State.SPLITTING_NEW;
                    break;
                case MERGING_NEW:
                    rs = ClusterStatusProtos.RegionState.State.MERGING_NEW;
                    break;
                case ABNORMALLY_CLOSED:
                    rs = ClusterStatusProtos.RegionState.State.ABNORMALLY_CLOSED;
                    break;
                default:
                    throw new IllegalStateException("");
            }
            return rs;
        }

        /**
         * Convert a protobuf HBaseProtos.RegionState.State to a RegionState.State
         *
         * @return the RegionState.State
         */
        @org.checkerframework.dataflow.qual.Pure
        public static State convert(ClusterStatusProtos.RegionState.State protoState) {
            State state;
            switch(protoState) {
                case OFFLINE:
                    state = OFFLINE;
                    break;
                case PENDING_OPEN:
                case OPENING:
                    state = OPENING;
                    break;
                case OPEN:
                    state = OPEN;
                    break;
                case PENDING_CLOSE:
                case CLOSING:
                    state = CLOSING;
                    break;
                case CLOSED:
                    state = CLOSED;
                    break;
                case SPLITTING:
                    state = SPLITTING;
                    break;
                case SPLIT:
                    state = SPLIT;
                    break;
                case FAILED_OPEN:
                    state = FAILED_OPEN;
                    break;
                case FAILED_CLOSE:
                    state = FAILED_CLOSE;
                    break;
                case MERGING:
                    state = MERGING;
                    break;
                case MERGED:
                    state = MERGED;
                    break;
                case SPLITTING_NEW:
                    state = SPLITTING_NEW;
                    break;
                case MERGING_NEW:
                    state = MERGING_NEW;
                    break;
                case ABNORMALLY_CLOSED:
                    state = ABNORMALLY_CLOSED;
                    break;
                default:
                    throw new IllegalStateException("Unhandled state " + protoState);
            }
            return state;
        }
    }

    private final long stamp;

    private final RegionInfo hri;

    private final ServerName serverName;

    private final State state;

    // The duration of region in transition
    private long ritDuration;

    public static RegionState createForTesting(RegionInfo region, State state) {
        return new RegionState(region, state, System.currentTimeMillis(), null);
    }

    public RegionState(RegionInfo region, State state, ServerName serverName) {
        this(region, state, System.currentTimeMillis(), serverName);
    }

    public RegionState(RegionInfo region, State state, long stamp, ServerName serverName) {
        this(region, state, stamp, serverName, 0);
    }

    public RegionState(RegionInfo region, State state, long stamp, ServerName serverName, long ritDuration) {
        this.hri = region;
        this.state = state;
        this.stamp = stamp;
        this.serverName = serverName;
        this.ritDuration = ritDuration;
    }

    @org.checkerframework.dataflow.qual.Pure
    public State getState() {
        return state;
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getStamp() {
        return stamp;
    }

    @org.checkerframework.dataflow.qual.Pure
    public RegionInfo getRegion() {
        return hri;
    }

    @org.checkerframework.dataflow.qual.Pure
    public ServerName getServerName() {
        return serverName;
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getRitDuration() {
        return ritDuration;
    }

    /**
     * Update the duration of region in transition
     * @param previousStamp previous RegionState's timestamp
     */
    void updateRitDuration(long previousStamp) {
        this.ritDuration += (this.stamp - previousStamp);
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isClosing() {
        return state == State.CLOSING;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isClosed() {
        return state == State.CLOSED;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isClosedOrAbnormallyClosed() {
        return isClosed() || this.state == State.ABNORMALLY_CLOSED;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isOpening() {
        return state == State.OPENING;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isOpened() {
        return state == State.OPEN;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isOffline() {
        return state == State.OFFLINE;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSplitting() {
        return state == State.SPLITTING;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSplit() {
        return state == State.SPLIT;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSplittingNew() {
        return state == State.SPLITTING_NEW;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isFailedOpen() {
        return state == State.FAILED_OPEN;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isFailedClose() {
        return state == State.FAILED_CLOSE;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isMerging() {
        return state == State.MERGING;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isMerged() {
        return state == State.MERGED;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isMergingNew() {
        return state == State.MERGING_NEW;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isOnServer(final ServerName sn) {
        return serverName != null && serverName.equals(sn);
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isMergingOnServer(final ServerName sn) {
        return isOnServer(sn) && isMerging();
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isMergingNewOnServer(final ServerName sn) {
        return isOnServer(sn) && isMergingNew();
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isMergingNewOrOpenedOnServer(final ServerName sn) {
        return isOnServer(sn) && (isMergingNew() || isOpened());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isMergingNewOrOfflineOnServer(final ServerName sn) {
        return isOnServer(sn) && (isMergingNew() || isOffline());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSplittingOnServer(final ServerName sn) {
        return isOnServer(sn) && isSplitting();
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSplittingNewOnServer(final ServerName sn) {
        return isOnServer(sn) && isSplittingNew();
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSplittingOrOpenedOnServer(final ServerName sn) {
        return isOnServer(sn) && (isSplitting() || isOpened());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSplittingOrSplitOnServer(final ServerName sn) {
        return isOnServer(sn) && (isSplitting() || isSplit());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isClosingOrClosedOnServer(final ServerName sn) {
        return isOnServer(sn) && (isClosing() || isClosed());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isOpeningOrFailedOpenOnServer(final ServerName sn) {
        return isOnServer(sn) && (isOpening() || isFailedOpen());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isOpeningOrOpenedOnServer(final ServerName sn) {
        return isOnServer(sn) && (isOpening() || isOpened());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isOpenedOnServer(final ServerName sn) {
        return isOnServer(sn) && isOpened();
    }

    /**
     * Check if a region state can transition to offline
     */
    @org.checkerframework.dataflow.qual.Pure
    public boolean isReadyToOffline() {
        return isMerged() || isSplit() || isOffline() || isSplittingNew() || isMergingNew();
    }

    /**
     * Check if a region state can transition to online
     */
    @org.checkerframework.dataflow.qual.Pure
    public boolean isReadyToOnline() {
        return isOpened() || isSplittingNew() || isMergingNew();
    }

    /**
     * Check if a region state is one of offline states that
     * can't transition to pending_close/closing (unassign/offline)
     */
    @org.checkerframework.dataflow.qual.Pure
    public boolean isUnassignable() {
        return isUnassignable(state);
    }

    /**
     * Check if a region state is one of offline states that
     * can't transition to pending_close/closing (unassign/offline)
     */
    @org.checkerframework.dataflow.qual.Pure
    public static boolean isUnassignable(State state) {
        return state == State.MERGED || state == State.SPLIT || state == State.OFFLINE || state == State.SPLITTING_NEW || state == State.MERGING_NEW;
    }

    @org.checkerframework.dataflow.qual.Pure
    public String toString() {
        return "{" + hri.getShortNameToLog() + " state=" + state + ", ts=" + stamp + ", server=" + serverName + "}";
    }

    /**
     * A slower (but more easy-to-read) stringification
     */
    public String toDescriptiveString() {
        long relTime = System.currentTimeMillis() - stamp;
        return hri.getRegionNameAsString() + " state=" + state + ", ts=" + new Date(stamp) + " (" + (relTime / 1000) + "s ago), server=" + serverName;
    }

    /**
     * Convert a RegionState to an HBaseProtos.RegionState
     *
     * @return the converted HBaseProtos.RegionState
     */
    public ClusterStatusProtos.RegionState convert() {
        ClusterStatusProtos.RegionState.Builder regionState = ClusterStatusProtos.RegionState.newBuilder();
        regionState.setRegionInfo(ProtobufUtil.toRegionInfo(hri));
        regionState.setState(state.convert());
        regionState.setStamp(getStamp());
        return regionState.build();
    }

    /**
     * Convert a protobuf HBaseProtos.RegionState to a RegionState
     *
     * @return the RegionState
     */
    public static RegionState convert(ClusterStatusProtos.RegionState proto) {
        return new RegionState(ProtobufUtil.toRegionInfo(proto.getRegionInfo()), State.convert(proto.getState()), proto.getStamp(), null);
    }

    /**
     * Check if two states are the same, except timestamp
     */
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        RegionState tmp = (RegionState) obj;
        return RegionInfo.COMPARATOR.compare(tmp.hri, hri) == 0 && tmp.state == state && ((serverName != null && serverName.equals(tmp.serverName)) || (tmp.serverName == null && serverName == null));
    }

    /**
     * Don't count timestamp in hash code calculation
     */
    public int hashCode() {
        return (serverName != null ? serverName.hashCode() * 11 : 0) + hri.hashCode() + 5 * state.ordinal();
    }
}
