/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.client;

import java.util.Map;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.hadoop.hbase.TableName;
import org.apache.yetus.audience.InterfaceAudience;
import org.apache.hbase.thirdparty.org.apache.commons.collections4.MapUtils;

/**
 * The POJO equivalent of HBaseProtos.SnapshotDescription
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class SnapshotDescription {

    private final String name;

    private final TableName table;

    private final SnapshotType snapShotType;

    private final String owner;

    private final long creationTime;

    private final long ttl;

    private final int version;

    public SnapshotDescription(String name) {
        this(name, null);
    }

    public SnapshotDescription(String name, TableName table) {
        this(name, table, SnapshotType.DISABLED, null, -1, -1, null);
    }

    public SnapshotDescription(String name, TableName table, SnapshotType type) {
        this(name, table, type, null, -1, -1, null);
    }

    public SnapshotDescription(String name, TableName table, SnapshotType type, String owner) {
        this(name, table, type, owner, -1, -1, null);
    }

    /**
     * SnapshotDescription Parameterized Constructor
     *
     * @param name Name of the snapshot
     * @param table TableName associated with the snapshot
     * @param type Type of the snapshot - enum SnapshotType
     * @param owner Snapshot Owner
     * @param creationTime Creation time for Snapshot
     * @param version Snapshot Version
     * @deprecated since 2.3.0 and will be removed in 4.0.0. Use
     *   {@link #SnapshotDescription(String, TableName, SnapshotType, String, long, int, Map)}
     */
    public SnapshotDescription(String name, TableName table, SnapshotType type, String owner, long creationTime, int version) {
        this(name, table, type, owner, creationTime, version, null);
    }

    /**
     * SnapshotDescription Parameterized Constructor
     *
     * @param name          Name of the snapshot
     * @param table         TableName associated with the snapshot
     * @param type          Type of the snapshot - enum SnapshotType
     * @param owner         Snapshot Owner
     * @param creationTime  Creation time for Snapshot
     * @param version       Snapshot Version
     * @param snapshotProps Additional properties for snapshot e.g. TTL
     */
    public SnapshotDescription(String name, TableName table, SnapshotType type, String owner, long creationTime, int version, Map<String, Object> snapshotProps) {
        this.name = name;
        this.table = table;
        this.snapShotType = type;
        this.owner = owner;
        this.creationTime = creationTime;
        this.ttl = getTtlFromSnapshotProps(snapshotProps);
        this.version = version;
    }

    private long getTtlFromSnapshotProps(Map<String, Object> snapshotProps) {
        return MapUtils.getLongValue(snapshotProps, "TTL", -1);
    }

    /**
     * SnapshotDescription Parameterized Constructor
     *
     * @param snapshotName  Name of the snapshot
     * @param tableName     TableName associated with the snapshot
     * @param type          Type of the snapshot - enum SnapshotType
     * @param snapshotProps Additional properties for snapshot e.g. TTL
     */
    public SnapshotDescription(String snapshotName, TableName tableName, SnapshotType type, Map<String, Object> snapshotProps) {
        this(snapshotName, tableName, type, null, -1, -1, snapshotProps);
    }

    @org.checkerframework.dataflow.qual.Pure
    public String getName() {
        return this.name;
    }

    public String getTableNameAsString() {
        return this.table.getNameAsString();
    }

    @org.checkerframework.dataflow.qual.Pure
    public TableName getTableName() {
        return this.table;
    }

    @org.checkerframework.dataflow.qual.Pure
    public SnapshotType getType() {
        return this.snapShotType;
    }

    @org.checkerframework.dataflow.qual.Pure
    public String getOwner() {
        return this.owner;
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getCreationTime() {
        return this.creationTime;
    }

    // get snapshot ttl in sec
    @org.checkerframework.dataflow.qual.Pure
    public long getTtl() {
        return ttl;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getVersion() {
        return this.version;
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).append("table", table).append("snapShotType", snapShotType).append("owner", owner).append("creationTime", creationTime).append("ttl", ttl).append("version", version).toString();
    }
}
