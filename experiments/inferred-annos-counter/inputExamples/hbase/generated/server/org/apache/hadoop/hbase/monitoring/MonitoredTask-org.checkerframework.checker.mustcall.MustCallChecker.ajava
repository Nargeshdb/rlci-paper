/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.monitoring;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import org.apache.yetus.audience.InterfaceAudience;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public interface MonitoredTask extends Cloneable {

    enum State {

        RUNNING, WAITING, COMPLETE, ABORTED
    }

    public interface StatusJournalEntry {

        @org.checkerframework.dataflow.qual.Pure
        String getStatus();

        @org.checkerframework.dataflow.qual.Pure
        long getTimeStamp();
    }

    @org.checkerframework.dataflow.qual.Pure
    long getStartTime();

    @org.checkerframework.dataflow.qual.Pure
    String getDescription();

    @org.checkerframework.dataflow.qual.Pure
    String getStatus();

    @org.checkerframework.dataflow.qual.Pure
    long getStatusTime();

    @org.checkerframework.dataflow.qual.Pure
    State getState();

    @org.checkerframework.dataflow.qual.Pure
    long getStateTime();

    @org.checkerframework.dataflow.qual.Pure
    long getCompletionTimestamp();

    @org.checkerframework.dataflow.qual.Pure
    long getWarnTime();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void markComplete(String msg);

    @org.checkerframework.dataflow.qual.SideEffectFree
    void pause(String msg);

    @org.checkerframework.dataflow.qual.SideEffectFree
    void resume(String msg);

    @org.checkerframework.dataflow.qual.SideEffectFree
    void abort(String msg);

    @org.checkerframework.dataflow.qual.SideEffectFree
    void expireNow();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setStatus(String status);

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setDescription(String description);

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setWarnTime(final long t);

    @org.checkerframework.dataflow.qual.Pure
    List<StatusJournalEntry> getStatusJournal();

    /**
     * Enable journal that will store all statuses that have been set along with the time stamps when
     * they were set.
     * @param includeCurrentStatus whether to include the current set status in the journal
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void enableStatusJournal(boolean includeCurrentStatus);

    @org.checkerframework.dataflow.qual.SideEffectFree
    void disableStatusJournal();

    @org.checkerframework.dataflow.qual.Pure
    String prettyPrintJournal();

    /**
     * Explicitly mark this status as able to be cleaned up,
     * even though it might not be complete.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void cleanup();

    /**
     * Public exposure of Object.clone() in order to allow clients to easily
     * capture current state.
     * @return a copy of the object whose references will not change
     */
    @org.checkerframework.dataflow.qual.Pure
    MonitoredTask clone();

    /**
     * Creates a string map of internal details for extensible exposure of
     * monitored tasks.
     * @return A Map containing information for this task.
     */
    @org.checkerframework.dataflow.qual.Pure
    Map<String, Object> toMap() throws IOException;

    /**
     * Creates a JSON object for parseable exposure of monitored tasks.
     * @return An encoded JSON object containing information for this task.
     */
    @org.checkerframework.dataflow.qual.Pure
    String toJSON() throws IOException;
}
