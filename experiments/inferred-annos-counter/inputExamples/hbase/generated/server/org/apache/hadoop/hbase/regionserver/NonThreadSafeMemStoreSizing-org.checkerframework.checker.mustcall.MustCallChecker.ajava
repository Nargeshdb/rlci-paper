/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.regionserver;

import org.apache.yetus.audience.InterfaceAudience;

/**
 * Accounting of current heap and data sizes.
 * <em>NOT THREAD SAFE</em>.
 * Use in a 'local' context only where just a single-thread is updating. No concurrency!
 * Used, for example, when summing all Cells in a single batch where result is then applied to the
 * Store.
 * @see ThreadSafeMemStoreSizing
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
class NonThreadSafeMemStoreSizing implements MemStoreSizing {

    private long dataSize = 0;

    private long heapSize = 0;

    private long offHeapSize = 0;

    private int cellsCount = 0;

    @org.checkerframework.dataflow.qual.SideEffectFree
    NonThreadSafeMemStoreSizing() {
        this(0, 0, 0, 0);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    NonThreadSafeMemStoreSizing(MemStoreSize mss) {
        this(mss.getDataSize(), mss.getHeapSize(), mss.getOffHeapSize(), mss.getCellsCount());
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    NonThreadSafeMemStoreSizing(long dataSize, long heapSize, long offHeapSize, int cellsCount) {
        incMemStoreSize(dataSize, heapSize, offHeapSize, cellsCount);
    }

    public MemStoreSize getMemStoreSize() {
        return new MemStoreSize(this.dataSize, this.heapSize, this.offHeapSize, this.cellsCount);
    }

    public long incMemStoreSize(long dataSizeDelta, long heapSizeDelta, long offHeapSizeDelta, int cellsCountDelta) {
        this.offHeapSize += offHeapSizeDelta;
        this.heapSize += heapSizeDelta;
        this.dataSize += dataSizeDelta;
        this.cellsCount += cellsCountDelta;
        return this.dataSize;
    }

    public boolean compareAndSetDataSize(long expected, long updated) {
        if (dataSize == expected) {
            dataSize = updated;
            return true;
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getDataSize() {
        return dataSize;
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getHeapSize() {
        return heapSize;
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getOffHeapSize() {
        return offHeapSize;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getCellsCount() {
        return cellsCount;
    }

    @org.checkerframework.dataflow.qual.Pure
    public String toString() {
        return getMemStoreSize().toString();
    }
}
