/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.regionserver;

import java.io.IOException;
import org.apache.commons.lang3.NotImplementedException;
import org.apache.yetus.audience.InterfaceAudience;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.client.Scan;

/**
 * A "non-lazy" scanner which always does a real seek operation. Most scanners
 * are inherited from this class.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
@org.checkerframework.checker.mustcall.qual.InheritableMustCall({ "close" })
public abstract class NonLazyKeyValueScanner implements KeyValueScanner {

    @org.checkerframework.dataflow.qual.Pure
    public boolean requestSeek(Cell kv, boolean forward, boolean useBloom) throws IOException {
        return doRealSeek(this, kv, forward);
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean realSeekDone() {
        return true;
    }

    public void enforceSeek() throws IOException {
        throw new NotImplementedException("enforceSeek must not be called on a non-lazy scanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public static boolean doRealSeek(KeyValueScanner scanner, Cell kv, boolean forward) throws IOException {
        return forward ? scanner.reseek(kv) : scanner.seek(kv);
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean shouldUseScanner(Scan scan, HStore store, long oldestUnexpiredTS) {
        // No optimizations implemented by default.
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isFileScanner() {
        // Not a file by default.
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Path getFilePath() {
        // Not a file by default.
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Cell getNextIndexedKey() {
        return null;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void shipped() throws IOException {
        // do nothing
    }
}
