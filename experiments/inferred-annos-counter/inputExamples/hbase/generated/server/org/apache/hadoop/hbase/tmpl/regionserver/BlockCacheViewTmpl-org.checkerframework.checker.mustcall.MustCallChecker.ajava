// Autogenerated Jamon proxy
// /home/narges/IntellijWS/hbase/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/BlockCacheViewTmpl.jamon
package org.apache.hadoop.hbase.tmpl.regionserver;

// 29, 1
import java.util.*;
// 30, 1
import org.apache.hadoop.conf.Configuration;
// 31, 1
import org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.CachedBlocksByFile;
// 32, 1
import org.apache.hadoop.hbase.io.hfile.BlockCacheUtil;
// 33, 1
import org.apache.hadoop.hbase.io.hfile.CachedBlock;
// 34, 1
import org.apache.hadoop.hbase.io.hfile.CacheConfig;
// 35, 1
import org.apache.hadoop.hbase.io.hfile.BlockCache;
// 36, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketCacheStats;
// 37, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketCache;
// 38, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketAllocator;
// 39, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketAllocator.Bucket;
// 40, 1
import org.apache.hadoop.util.StringUtils;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class BlockCacheViewTmpl extends org.jamon.AbstractTemplateProxy {

    public BlockCacheViewTmpl(org.jamon.TemplateManager p_manager) {
        super(p_manager);
    }

    protected BlockCacheViewTmpl(String p_path) {
        super(p_path);
    }

    public BlockCacheViewTmpl() {
        super("/org/apache/hadoop/hbase/tmpl/regionserver/BlockCacheViewTmpl");
    }

    public interface Intf extends org.jamon.AbstractTemplateProxy.Intf {

        @org.checkerframework.dataflow.qual.SideEffectFree
        void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException;
    }

    public static class ImplData extends org.jamon.AbstractTemplateProxy.ImplData {

        // 22, 1
        public void setCacheConfig(CacheConfig cacheConfig) {
            // 22, 1
            m_cacheConfig = cacheConfig;
        }

        @org.checkerframework.dataflow.qual.Pure
        public CacheConfig getCacheConfig() {
            return m_cacheConfig;
        }

        private CacheConfig m_cacheConfig;

        // 23, 1
        public void setConf(Configuration conf) {
            // 23, 1
            m_conf = conf;
        }

        @org.checkerframework.dataflow.qual.Pure
        public Configuration getConf() {
            return m_conf;
        }

        private Configuration m_conf;

        // 24, 1
        public void setBcn(String bcn) {
            // 24, 1
            m_bcn = bcn;
        }

        @org.checkerframework.dataflow.qual.Pure
        public String getBcn() {
            return m_bcn;
        }

        private String m_bcn;

        // 25, 1
        public void setBcv(String bcv) {
            // 25, 1
            m_bcv = bcv;
        }

        @org.checkerframework.dataflow.qual.Pure
        public String getBcv() {
            return m_bcv;
        }

        private String m_bcv;

        // 26, 1
        public void setBlockCache(BlockCache blockCache) {
            // 26, 1
            m_blockCache = blockCache;
        }

        @org.checkerframework.dataflow.qual.Pure
        public BlockCache getBlockCache() {
            return m_blockCache;
        }

        private BlockCache m_blockCache;
    }

    protected org.jamon.AbstractTemplateProxy.ImplData makeImplData() {
        return new ImplData();
    }

    public ImplData getImplData() {
        return (ImplData) super.getImplData();
    }

    public org.jamon.AbstractTemplateImpl constructImpl(Class<? extends org.jamon.AbstractTemplateImpl> p_class) {
        try {
            return p_class.getConstructor(new Class[] { org.jamon.TemplateManager.class, ImplData.class }).newInstance(new Object[] { getTemplateManager(), getImplData() });
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    protected org.jamon.AbstractTemplateImpl constructImpl() {
        return new BlockCacheViewTmplImpl(getTemplateManager(), getImplData());
    }

    public org.jamon.Renderer makeRenderer(final CacheConfig cacheConfig, final Configuration conf, final String bcn, final String bcv, final BlockCache blockCache) {
        return new org.jamon.AbstractRenderer() {

            public void renderTo(final java.io.Writer jamonWriter) throws java.io.IOException {
                render(jamonWriter, cacheConfig, conf, bcn, bcv, blockCache);
            }
        };
    }

    public void render(final java.io.Writer jamonWriter, final CacheConfig cacheConfig, final Configuration conf, final String bcn, final String bcv, final BlockCache blockCache) throws java.io.IOException {
        renderNoFlush(jamonWriter, cacheConfig, conf, bcn, bcv, blockCache);
        jamonWriter.flush();
    }

    public void renderNoFlush(final java.io.Writer jamonWriter, final CacheConfig cacheConfig, final Configuration conf, final String bcn, final String bcv, final BlockCache blockCache) throws java.io.IOException {
        ImplData implData = getImplData();
        implData.setCacheConfig(cacheConfig);
        implData.setConf(conf);
        implData.setBcn(bcn);
        implData.setBcv(bcv);
        implData.setBlockCache(blockCache);
        Intf instance = (Intf) getTemplateManager().constructImpl(this);
        instance.renderNoFlush(jamonWriter);
        reset();
    }
}
