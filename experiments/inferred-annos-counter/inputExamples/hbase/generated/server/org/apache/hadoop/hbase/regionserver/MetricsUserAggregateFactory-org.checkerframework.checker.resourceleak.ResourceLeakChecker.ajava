/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.regionserver;

import org.apache.hadoop.conf.Configuration;
import org.apache.yetus.audience.InterfaceAudience;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class MetricsUserAggregateFactory {

    @org.checkerframework.dataflow.qual.SideEffectFree
    private MetricsUserAggregateFactory() {
    }

    public static final String METRIC_USER_ENABLED_CONF = "hbase.regionserver.user.metrics.enabled";

    public static final boolean DEFAULT_METRIC_USER_ENABLED_CONF = false;

    public static MetricsUserAggregate getMetricsUserAggregate(Configuration conf) {
        if (conf.getBoolean(METRIC_USER_ENABLED_CONF, DEFAULT_METRIC_USER_ENABLED_CONF)) {
            return new MetricsUserAggregateImpl(conf);
        } else {
            //NoOpMetricUserAggregate
            return new MetricsUserAggregate() {

                @org.checkerframework.dataflow.qual.Pure
                public MetricsUserAggregateSource getSource() {
                    return null;
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updatePut(long t) {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateDelete(long t) {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateGet(long t) {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateIncrement(long t) {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateAppend(long t) {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateReplay(long t) {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateScanTime(long t) {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateFilteredReadRequests() {
                }

                @org.checkerframework.dataflow.qual.SideEffectFree
                public void updateReadRequestCount() {
                }
            };
        }
    }
}
