// Autogenerated Jamon implementation
// /home/narges/IntellijWS/hbase/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/tool/CanaryStatusTmpl.jamon
package org.apache.hadoop.hbase.tmpl.tool;

// 24, 1
import java.util.Map;
// 25, 1
import java.util.concurrent.atomic.LongAdder;
// 26, 1
import org.apache.hadoop.hbase.ServerName;
// 27, 1
import org.apache.hadoop.hbase.tool.CanaryTool.RegionStdOutSink;
// 28, 1
import org.apache.hadoop.hbase.util.JvmVersion;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class CanaryStatusTmplImpl extends org.jamon.AbstractTemplateImpl implements org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl.Intf {

    private final RegionStdOutSink sink;

    @org.checkerframework.dataflow.qual.Pure
    protected static org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl.ImplData p_implData) {
        return p_implData;
    }

    public CanaryStatusTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl.ImplData p_implData) {
        super(p_templateManager, __jamon_setOptionalArguments(p_implData));
        sink = p_implData.getSink();
    }

    public void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException {
        // 1, 1
        jamonWriter.write("\n<!--[if IE]>\n<!DOCTYPE html>\n<![endif]-->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Canary</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"\">\n    <link href=\"/static/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"/static/css/bootstrap-theme.min.css\" rel=\"stylesheet\">\n    <link href=\"/static/css/hbase.css\" rel=\"stylesheet\">\n  </head>\n\n  <body>\n\n    <div class=\"navbar  navbar-fixed-top navbar-default\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                <a class=\"navbar-brand\" href=\"/canary-status\"><img src=\"/static/hbase_logo_small.png\" alt=\"HBase Logo\"/></a>\n            </div>\n        </div>\n    </div>\n\n  <div class=\"container\">\n    <section>\n    <h2>Failed Servers</h2>\n        ");
        // 64, 9
        Map<ServerName, LongAdder> perServerFailuresCount = sink.getPerServerFailuresCount();
        // 67, 9
        jamonWriter.write("<table class=\"table table-striped\">\n          <tr>\n              <th>Server</th>\n              <th>Failures Count</th>\n          </tr>\n          ");
        // 72, 11
        if ((perServerFailuresCount != null && perServerFailuresCount.size() > 0)) {
            // 72, 87
            jamonWriter.write("\n          ");
            // 73, 11
            for (Map.Entry<ServerName, LongAdder> entry : perServerFailuresCount.entrySet()) {
                // 73, 94
                jamonWriter.write("\n          <tr>\n              <td>");
                // 75, 19
                {
                    // 75, 19
                    __jamon_innerUnit__serverNameLink(jamonWriter, entry.getKey());
                }
                // 75, 69
                jamonWriter.write("</td>\n              <td>");
                // 76, 19
                org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue()), jamonWriter);
                // 76, 41
                jamonWriter.write("</td>\n          </tr>\n          ");
            }
            // 78, 18
            jamonWriter.write("\n          ");
        }
        // 79, 17
        jamonWriter.write("\n          <tr><td>Total Failed Servers: ");
        // 80, 41
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf((perServerFailuresCount != null) ? perServerFailuresCount.size() : 0), jamonWriter);
        // 80, 115
        jamonWriter.write("</td></tr>\n        </table>\n    </section>\n    <section>\n      <h2>Failed Tables</h2>\n            ");
        // 85, 13
        Map<String, LongAdder> perTableFailuresCount = sink.getPerTableFailuresCount();
        // 88, 13
        jamonWriter.write("<table class=\"table table-striped\">\n              <tr>\n                  <th>Table</th>\n                  <th>Failures Count</th>\n              </tr>\n              ");
        // 93, 15
        if ((perTableFailuresCount != null && perTableFailuresCount.size() > 0)) {
            // 93, 89
            jamonWriter.write("\n              ");
            // 94, 15
            for (Map.Entry<String, LongAdder> entry : perTableFailuresCount.entrySet()) {
                // 94, 92
                jamonWriter.write("\n              <tr>\n                  <td>");
                // 96, 23
                org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getKey()), jamonWriter);
                // 96, 43
                jamonWriter.write("</td>\n                  <td>");
                // 97, 23
                org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue()), jamonWriter);
                // 97, 45
                jamonWriter.write("</td>\n              </tr>\n              ");
            }
            // 99, 22
            jamonWriter.write("\n              ");
        }
        // 100, 21
        jamonWriter.write("\n              <tr><td>Total Failed Tables: ");
        // 101, 44
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf((perTableFailuresCount != null) ? perTableFailuresCount.size() : 0), jamonWriter);
        // 101, 116
        jamonWriter.write("</td></tr>\n            </table>\n    </section>\n\n        <section>\n            <h2>Software Attributes</h2>\n            <table id=\"attributes_table\" class=\"table table-striped\">\n                <tr>\n                    <th>Attribute Name</th>\n                    <th>Value</th>\n                    <th>Description</th>\n                </tr>\n                <tr>\n                    <td>JVM Version</td>\n                    <td>");
        // 115, 25
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(JvmVersion.getVersion()), jamonWriter);
        // 115, 54
        jamonWriter.write("</td>\n                    <td>JVM vendor and version</td>\n                </tr>\n                <tr>\n                    <td>HBase Version</td>\n                    <td>");
        // 120, 25
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getVersion()), jamonWriter);
        // 120, 84
        jamonWriter.write(", r");
        // 120, 87
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getRevision()), jamonWriter);
        // 120, 147
        jamonWriter.write("</td><td>HBase version and revision</td>\n                </tr>\n                <tr>\n                    <td>HBase Compiled</td>\n                    <td>");
        // 124, 25
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getDate()), jamonWriter);
        // 124, 81
        jamonWriter.write(", ");
        // 124, 83
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getUser()), jamonWriter);
        // 124, 139
        jamonWriter.write("</td>\n                    <td>When HBase version was compiled and by whom</td>\n                </tr>\n                <tr>\n                    <td>Hadoop Version</td>\n                    <td>");
        // 129, 25
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getVersion()), jamonWriter);
        // 129, 78
        jamonWriter.write(", r");
        // 129, 81
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getRevision()), jamonWriter);
        // 129, 135
        jamonWriter.write("</td>\n                    <td>Hadoop version and revision</td>\n                </tr>\n                <tr>\n                    <td>Hadoop Compiled</td>\n                    <td>");
        // 134, 25
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getDate()), jamonWriter);
        // 134, 75
        jamonWriter.write(", ");
        // 134, 77
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getUser()), jamonWriter);
        // 134, 127
        jamonWriter.write("</td>\n                    <td>When Hadoop version was compiled and by whom</td>\n                </tr>\n            </table>\n        </section>\n        </div>\n    </div> <!-- /container -->\n\n    <script src=\"/static/js/jquery.min.js\" type=\"text/javascript\"></script>\n    <script src=\"/static/js/bootstrap.min.js\" type=\"text/javascript\"></script>\n    <script src=\"/static/js/tab.js\" type=\"text/javascript\"></script>\n  </body>\n</html>\n\n");
    }

    // 148, 1
    private void __jamon_innerUnit__serverNameLink(final java.io.Writer jamonWriter, final ServerName serverName) throws java.io.IOException {
        // 152, 9
        int infoPort = serverName.getPort() + 1;
        String url = "//" + serverName.getHostname() + ":" + infoPort + "/";
        // 157, 9
        if ((infoPort > 0)) {
            // 157, 31
            jamonWriter.write("\n            <a href=\"");
            // 158, 22
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(url), jamonWriter);
            // 158, 31
            jamonWriter.write("\">");
            // 158, 33
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(serverName.getServerName()), jamonWriter);
            // 158, 65
            jamonWriter.write("</a>\n        ");
        } else // 159, 9
        {
            // 159, 16
            jamonWriter.write("\n            ");
            // 160, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(serverName.getServerName()), jamonWriter);
            // 160, 45
            jamonWriter.write("\n        ");
        }
        // 161, 15
        jamonWriter.write("\n");
    }
}
