/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.regionserver;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.SortedSet;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellComparator;
import org.apache.hadoop.hbase.io.TimeRange;
import org.apache.yetus.audience.InterfaceAudience;
import org.slf4j.Logger;
import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;

/**
 * The CompositeImmutableSegments is created as a collection of ImmutableSegments and supports
 * the interface of a single ImmutableSegments.
 * The CompositeImmutableSegments is planned to be used only as a snapshot,
 * thus only relevant interfaces are supported
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class CompositeImmutableSegment extends ImmutableSegment {

    private final List<ImmutableSegment> segments;

    private long keySize = 0;

    public CompositeImmutableSegment(CellComparator comparator, List<ImmutableSegment> segments) {
        super(comparator, segments);
        this.segments = segments;
        for (ImmutableSegment s : segments) {
            this.timeRangeTracker.includeTimestamp(s.getTimeRangeTracker().getMax());
            this.timeRangeTracker.includeTimestamp(s.getTimeRangeTracker().getMin());
            this.keySize += s.getDataSize();
        }
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public List<Segment> getAllSegments() {
        return new ArrayList<>(segments);
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getNumOfSegments() {
        return segments.size();
    }

    /**
     * @return whether the segment has any cells
     */
    public boolean isEmpty() {
        for (ImmutableSegment s : segments) {
            if (!s.isEmpty())
                return false;
        }
        return true;
    }

    /**
     * @return number of cells in segment
     */
    @org.checkerframework.dataflow.qual.Pure
    public int getCellsCount() {
        int result = 0;
        for (ImmutableSegment s : segments) {
            result += s.getCellsCount();
        }
        return result;
    }

    /**
     * Closing a segment before it is being discarded
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public void close() {
        for (ImmutableSegment s : segments) {
            s.close();
        }
    }

    /**
     * If the segment has a memory allocator the cell is being cloned to this space, and returned;
     * otherwise the given cell is returned
     * @return either the given cell or its clone
     */
    @org.checkerframework.dataflow.qual.Pure
    public Cell maybeCloneWithAllocator(Cell cell, boolean forceCloneOfBigCell) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean shouldSeek(TimeRange tr, long oldestUnexpiredTS) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    /**
     * Creates the scanner for the given read point
     * @return a scanner for the given read point
     */
    @org.checkerframework.dataflow.qual.Pure
    public KeyValueScanner getScanner(long readPoint) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    public List<KeyValueScanner> getScanners(long readPoint) {
        List<KeyValueScanner> list = new ArrayList<>(segments.size());
        AbstractMemStore.addToScanners(segments, readPoint, list);
        return list;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isTagsPresent() {
        for (ImmutableSegment s : segments) {
            if (s.isTagsPresent())
                return true;
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void incScannerCount() {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void decScannerCount() {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    /**
     * Setting the CellSet of the segment - used only for flat immutable segment for setting
     * immutable CellSet after its creation in immutable segment constructor
     * @return this object
     */
    @org.checkerframework.dataflow.qual.Pure
    protected CompositeImmutableSegment setCellSet(CellSet cellSetOld, CellSet cellSetNew) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    protected long indexEntrySize() {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canBeFlattened() {
        return false;
    }

    /**
     * @return Sum of all cell sizes.
     */
    @org.checkerframework.dataflow.qual.Pure
    public long getDataSize() {
        return this.keySize;
    }

    /**
     * @return The heap size of this segment.
     */
    @org.checkerframework.dataflow.qual.Pure
    public long getHeapSize() {
        long result = 0;
        for (ImmutableSegment s : segments) {
            result += s.getHeapSize();
        }
        return result;
    }

    /**
     * Updates the heap size counter of the segment by the given delta
     */
    @org.checkerframework.dataflow.qual.Pure
    public long incMemStoreSize(long delta, long heapOverhead, long offHeapOverhead, int cellsCount) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getMinSequenceId() {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public TimeRangeTracker getTimeRangeTracker() {
        return this.timeRangeTracker;
    }

    //*** Methods for SegmentsScanner
    @org.checkerframework.dataflow.qual.Pure
    public Cell last() {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public Iterator<Cell> iterator() {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public SortedSet<Cell> headSet(Cell firstKeyOnRow) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public int compare(Cell left, Cell right) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.Pure
    public int compareRows(Cell left, Cell right) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    /**
     * @return a set of all cells in the segment
     */
    @org.checkerframework.dataflow.qual.Pure
    protected CellSet getCellSet() {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    protected void internalAdd(Cell cell, boolean mslabUsed, MemStoreSizing memstoreSizing, boolean sizeAddedPreOperation) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    protected void updateMetaInfo(Cell cellToAdd, boolean succ, boolean mslabUsed, MemStoreSizing memstoreSizing, boolean sizeAddedPreOperation) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    /**
     * Returns a subset of the segment cell set, which starts with the given cell
     * @param firstCell a cell in the segment
     * @return a subset of the segment cell set, which starts with the given cell
     */
    @org.checkerframework.dataflow.qual.Pure
    protected SortedSet<Cell> tailSet(Cell firstCell) {
        throw new IllegalStateException("Not supported by CompositeImmutableScanner");
    }

    // Debug methods
    /**
     * Dumps all cells of the segment into the given log
     */
    void dump(Logger log) {
        for (ImmutableSegment s : segments) {
            s.dump(log);
        }
    }

    public String toString() {
        StringBuilder sb = new StringBuilder("This is CompositeImmutableSegment and those are its segments:: ");
        for (ImmutableSegment s : segments) {
            sb.append(s.toString());
        }
        return sb.toString();
    }

    List<KeyValueScanner> getSnapshotScanners() {
        List<KeyValueScanner> list = new ArrayList<>(this.segments.size());
        for (ImmutableSegment segment : this.segments) {
            list.add(new SnapshotSegmentScanner(segment));
        }
        return list;
    }
}
