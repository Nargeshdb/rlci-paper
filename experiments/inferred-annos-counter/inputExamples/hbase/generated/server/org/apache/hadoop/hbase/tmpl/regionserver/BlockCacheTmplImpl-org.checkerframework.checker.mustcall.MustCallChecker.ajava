// Autogenerated Jamon implementation
// /home/narges/IntellijWS/hbase/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/BlockCacheTmpl.jamon
package org.apache.hadoop.hbase.tmpl.regionserver;

// 32, 1
import java.util.Map;
// 33, 1
import org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.CachedBlocksByFile;
// 34, 1
import org.apache.hadoop.hbase.io.hfile.AgeSnapshot;
// 35, 1
import org.apache.hadoop.hbase.io.hfile.CachedBlock;
// 36, 1
import org.apache.hadoop.conf.Configuration;
// 37, 1
import org.apache.hadoop.hbase.io.hfile.CacheConfig;
// 38, 1
import org.apache.hadoop.hbase.io.hfile.BlockCache;
// 39, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketCacheStats;
// 40, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketCache;
// 41, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketAllocator;
// 42, 1
import org.apache.hadoop.hbase.io.hfile.bucket.BucketAllocator.Bucket;
// 43, 1
import org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class BlockCacheTmplImpl extends org.jamon.AbstractTemplateImpl implements org.apache.hadoop.hbase.tmpl.regionserver.BlockCacheTmpl.Intf {

    private final CacheConfig cacheConfig;

    private final Configuration config;

    private final BlockCache bc;

    @org.checkerframework.dataflow.qual.Pure
    protected static org.apache.hadoop.hbase.tmpl.regionserver.BlockCacheTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.regionserver.BlockCacheTmpl.ImplData p_implData) {
        return p_implData;
    }

    public BlockCacheTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.regionserver.BlockCacheTmpl.ImplData p_implData) {
        super(p_templateManager, __jamon_setOptionalArguments(p_implData));
        cacheConfig = p_implData.getCacheConfig();
        config = p_implData.getConfig();
        bc = p_implData.getBc();
    }

    public void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException {
        // 25, 1
        String bcUrl = bc == null ? null : "http://hbase.apache.org/devapidocs/" + bc.getClass().getName().replaceAll("\\.", "/") + ".html";
        String bcName = bc == null ? null : bc.getClass().getSimpleName();
        BlockCache[] bcs = bc == null ? null : bc.getBlockCaches();
        boolean evictions = bcs != null && bcs.length > 1;
        // 45, 1
        jamonWriter.write("<div class=\"tabbable\">\n    <ul class=\"nav nav-pills\">\n        <li class=\"active\"><a href=\"#tab_bc_baseInfo\" data-toggle=\"tab\">Base Info</a></li>\n        <li class=\"\"><a href=\"#tab_bc_config\" data-toggle=\"tab\">Config</a></li>\n        <li class=\"\"><a href=\"#tab_bc_stats\" data-toggle=\"tab\">Stats</a></li>\n        <li class=\"\"><a href=\"#tab_bc_l1\" data-toggle=\"tab\">L1</a></li>\n        <li class=\"\"><a href=\"#tab_bc_l2\" data-toggle=\"tab\">L2</a></li>\n    </ul>\n    <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\n        <div class=\"tab-pane active\" id=\"tab_bc_baseInfo\">\n            ");
        // 55, 13
        {
            // 55, 13
            __jamon_innerUnit__bc_baseInfo(jamonWriter, bc, bcUrl, bcName);
        }
        // 55, 73
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_bc_config\">\n            ");
        // 58, 13
        {
            // 58, 13
            __jamon_innerUnit__bc_config(jamonWriter, cacheConfig);
        }
        // 58, 55
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_bc_stats\">\n            ");
        // 61, 13
        {
            // 61, 13
            __jamon_innerUnit__bc_stats(jamonWriter, bc);
        }
        // 61, 36
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_bc_l1\">\n            ");
        // 64, 13
        {
            // 64, 13
            __jamon_innerUnit__bc_l(jamonWriter, bcs == null ? bc : bcs[0], "L1", evictions);
        }
        // 64, 90
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_bc_l2\">\n            ");
        // 67, 13
        {
            // 67, 13
            __jamon_innerUnit__bc_l(jamonWriter, bcs == null ? null : bcs.length <= 1 ? null : bcs[1], "L2", evictions);
        }
        // 67, 115
        jamonWriter.write("\n        </div>\n    </div>\n</div>\n\n");
    }

    // 72, 1
    private void __jamon_innerUnit__bc_baseInfo(final java.io.Writer jamonWriter, final BlockCache bc, final String bcUrl, final String bcName) throws java.io.IOException {
        // 78, 1
        BlockCache[] bcs = bc == null ? null : bc.getBlockCaches();
        String bcl1Url = null;
        String bcl1Name = null;
        String bcl2Url = null;
        String bcl2Name = null;
        if (bcs != null) {
            BlockCache bcl1 = bcs[0];
            if (bcl1 != null) {
                bcl1Url = "http://hbase.apache.org/devapidocs/" + bcl1.getClass().getName().replaceAll("\\.", "/") + ".html";
                bcl1Name = bcl1.getClass().getSimpleName();
            }
            if (bcs.length == 2) {
                BlockCache bcl2 = bcs[1];
                bcl2Url = "http://hbase.apache.org/devapidocs/" + bcl2.getClass().getName().replaceAll("\\.", "/") + ".html";
                bcl2Name = bcl2.getClass().getSimpleName();
            }
        }
        // 97, 1
        jamonWriter.write("<table class=\"table table-striped\">\n    <tr>\n        <th>Attribute</th>\n        <th>Value</th>\n        <th>Description</th>\n    </tr>\n    </tr>\n    <tr>\n        <td>Implementation</td>\n        <td><a href=\"");
        // 106, 22
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bcUrl), jamonWriter);
        // 106, 33
        jamonWriter.write("\">");
        // 106, 35
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bcName), jamonWriter);
        // 106, 47
        jamonWriter.write("</a></td>\n        <td>Block cache implementing class</td>\n    </tr>\n</table>\n<p>See <a href=\"http://hbase.apache.org/book.html#block.cache\">block cache</a> in the HBase Reference Guide for help.</p>\n");
    }

    // 113, 1
    private void __jamon_innerUnit__bc_config(final java.io.Writer jamonWriter, final CacheConfig cacheConfig) throws java.io.IOException {
        // 117, 1
        if (cacheConfig == null) {
            // 117, 28
            jamonWriter.write("\n<p>CacheConfig is null</p>\n");
        } else // 119, 1
        {
            // 119, 8
            jamonWriter.write("\n<table class=\"table table-striped\">\n    <tr>\n        <th>Attribute</th>\n        <th>Value</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>Cache DATA on Read</td>\n        <td>");
            // 128, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cacheConfig.shouldCacheDataOnRead()), jamonWriter);
            // 128, 54
            jamonWriter.write("</td>\n        <td>True if DATA blocks are cached on read\n        (INDEX & BLOOM blocks are always cached)</td>\n    </tr>\n    <tr>\n        <td>Cache DATA on Write</td>\n        <td>");
            // 134, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cacheConfig.shouldCacheDataOnWrite()), jamonWriter);
            // 134, 55
            jamonWriter.write("</td>\n        <td>True if DATA blocks are cached on write.</td>\n    </tr>\n    <tr>\n        <td>Cache INDEX on Write</td>\n        <td>");
            // 139, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cacheConfig.shouldCacheIndexesOnWrite()), jamonWriter);
            // 139, 58
            jamonWriter.write("</td>\n        <td>True if INDEX blocks are cached on write</td>\n    </tr>\n    <tr>\n        <td>Cache BLOOM on Write</td>\n        <td>");
            // 144, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cacheConfig.shouldCacheBloomsOnWrite()), jamonWriter);
            // 144, 57
            jamonWriter.write("</td>\n        <td>True if BLOOM blocks are cached on write</td>\n    </tr>\n    <tr>\n        <td>Evict blocks on Close</td>\n        <td>");
            // 149, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cacheConfig.shouldEvictOnClose()), jamonWriter);
            // 149, 51
            jamonWriter.write("</td>\n        <td>True if blocks are evicted from cache when an HFile\n        reader is closed</td>\n    </tr>\n    <tr>\n        <td>Cache DATA in compressed format</td>\n        <td>");
            // 155, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cacheConfig.shouldCacheDataCompressed()), jamonWriter);
            // 155, 58
            jamonWriter.write("</td>\n        <td>True if DATA blocks are cached in their compressed form</td>\n    </tr>\n    <tr>\n        <td>Prefetch on Open</td>\n        <td>");
            // 160, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cacheConfig.shouldPrefetchOnOpen()), jamonWriter);
            // 160, 53
            jamonWriter.write("</td>\n        <td>True if blocks are prefetched into cache on open</td>\n    </tr>\n</table>\n");
        }
        // 164, 7
        jamonWriter.write("\n");
    }

    // 262, 1
    private void __jamon_innerUnit__bc_l(final java.io.Writer jamonWriter, final BlockCache bc, final String name, final boolean evictions) throws java.io.IOException {
        // 268, 1
        if (bc == null) {
            // 268, 19
            jamonWriter.write("\n<p>No ");
            // 269, 7
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(name), jamonWriter);
            // 269, 17
            jamonWriter.write(" deployed</p>\n");
        } else // 270, 1
        {
            // 270, 8
            jamonWriter.write("\n");
            // 271, 1
            {
                // 271, 1
                __jamon_innerUnit__block_cache(jamonWriter, bc, name, evictions);
            }
            // 271, 65
            jamonWriter.write("\n");
        }
        // 272, 7
        jamonWriter.write("\n");
    }

    // 224, 1
    private void __jamon_innerUnit__bc_stats(final java.io.Writer jamonWriter, final BlockCache bc) throws java.io.IOException {
        // 228, 1
        if (bc == null) {
            // 228, 19
            jamonWriter.write("\n<p>BlockCache is null</p>\n");
        } else // 230, 1
        {
            // 230, 8
            jamonWriter.write("\n<table class=\"table table-striped\">\n    <tr>\n        <th>Attribute</th>\n        <th>Value</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>Size</td>\n        <td>");
            // 239, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(bc.getCurrentSize(), "B", 1)), jamonWriter);
            // 240, 23
            jamonWriter.write("</td>\n        <td>Current size of block cache in use</td>\n    </tr>\n    <tr>\n        <td>Free</td>\n        <td>");
            // 245, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(bc.getFreeSize(), "B", 1)), jamonWriter);
            // 246, 23
            jamonWriter.write("</td>\n        <td>The total free memory currently available to store more cache entries</td>\n    </tr>\n    <tr>\n        <td>Count</td>\n        <td>");
            // 251, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getBlockCount())), jamonWriter);
            // 251, 59
            jamonWriter.write("</td>\n        <td>Number of blocks in block cache</td>\n    </tr>\n    ");
            // 254, 5
            {
                // 254, 5
                __jamon_innerUnit__evictions_tmpl(jamonWriter, bc);
            }
            // 254, 35
            jamonWriter.write("\n    ");
            // 255, 5
            {
                // 255, 5
                __jamon_innerUnit__hits_tmpl(jamonWriter, bc);
            }
            // 255, 30
            jamonWriter.write("\n</table>\n<p>If block cache is made up of more than one cache -- i.e. a L1 and a L2 -- then the above\nare combined counts. Request count is sum of hits and misses.</p>\n");
        }
        // 259, 7
        jamonWriter.write("\n");
    }

    // 275, 1
    private void __jamon_innerUnit__block_cache(final java.io.Writer jamonWriter, final BlockCache bc, final String name, final boolean evictions) throws java.io.IOException {
        // 281, 1
        String bcUrl = "http://hbase.apache.org/devapidocs/" + bc.getClass().getName().replaceAll("\\.", "/") + ".html";
        String bcName = bc.getClass().getSimpleName();
        org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.CachedBlocksByFile cbsbf = org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.getLoadedCachedBlocksByFile(config, bc);
        AgeSnapshot cbsbfSnapshot = cbsbf.getAgeInCacheSnapshot();
        boolean bucketCache = bc.getClass().getSimpleName().equals("BucketCache");
        BucketCacheStats bucketCacheStats = null;
        BucketAllocator bucketAllocator = null;
        if (bucketCache) {
            bucketCacheStats = (BucketCacheStats) bc.getStats();
            bucketAllocator = ((BucketCache) bc).getAllocator();
        }
        // 297, 1
        if (cbsbf.isFull()) {
            // 297, 23
            jamonWriter.write("\n<p>\n<div class=\"alert alert-danger\">\n<strong>The stats below are incomplete!</strong> We ran into our accounting limit of ");
            // 300, 86
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(cbsbf.getCount()), jamonWriter);
            // 300, 108
            jamonWriter.write(" blocks. Up the configuration <i>hbase.ui.blockcache.by.file.max</i>.\n</div>\n</p> \n");
        }
        // 303, 7
        jamonWriter.write("\n<table id=\"blocks_summary\" class=\"table table-striped\">\n    <tr>\n        <th>Attribute</th>\n        <th>Value</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>Implementation</td>\n        <td><a href=\"");
        // 312, 22
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bcUrl), jamonWriter);
        // 312, 33
        jamonWriter.write("\">");
        // 312, 35
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bc.getClass().getSimpleName()), jamonWriter);
        // 312, 70
        jamonWriter.write("</a></td>\n        <td>Class implementing this block cache Level</td>\n    </tr>\n");
        // 315, 1
        if (bucketCache) {
            // 315, 20
            jamonWriter.write("\n    <tr>\n        <td>Implementation</td>\n        <td>");
            // 318, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(((BucketCache) bc).getIoEngine()), jamonWriter);
            // 318, 50
            jamonWriter.write("</a></td>\n        <td>IOEngine</td>\n    </tr>\n");
        }
        // 321, 7
        jamonWriter.write("\n    <tr>\n        <td>Cache Size Limit</td>\n        <td>");
        // 324, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(bc.getMaxSize(), "B", 1)), jamonWriter);
        // 324, 79
        jamonWriter.write("</td>\n        <td>Max size of cache</td>\n    </tr>\n    <tr>\n        <td>Block Count</td>\n        <td>");
        // 329, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getBlockCount())), jamonWriter);
        // 329, 59
        jamonWriter.write("</td>\n        <td>Count of Blocks</td>\n    </tr>\n");
        // 332, 1
        if (!bucketCache) {
            // 332, 21
            jamonWriter.write("\n    <tr>\n        <td>Data Block Count</td>\n        <td>");
            // 335, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getDataBlockCount())), jamonWriter);
            // 335, 63
            jamonWriter.write("</td>\n        <td>Count of DATA Blocks</td>\n    </tr>\n");
        }
        // 338, 7
        jamonWriter.write("\n    <tr>\n        <td>Size of Blocks</td>\n        <td>");
        // 341, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(bc.getCurrentSize(), "B", 1)), jamonWriter);
        // 341, 83
        jamonWriter.write("</td>\n        <td>Size of Blocks</td>\n    </tr>\n");
        // 344, 1
        if (!bucketCache) {
            // 344, 21
            jamonWriter.write("\n    <tr>\n        <td>Size of Data Blocks</td>\n        <td>");
            // 347, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(bc.getCurrentDataSize(), "B", 1)), jamonWriter);
            // 347, 87
            jamonWriter.write("</td>\n        <td>Size of DATA Blocks</td>\n    </tr>\n");
        }
        // 350, 7
        jamonWriter.write(" \n");
        // 351, 1
        {
            // 351, 1
            __jamon_innerUnit__evictions_tmpl(jamonWriter, bc);
        }
        // 351, 31
        jamonWriter.write("\n");
        // 352, 1
        {
            // 352, 1
            __jamon_innerUnit__hits_tmpl(jamonWriter, bc);
        }
        // 352, 26
        jamonWriter.write("\n\n");
        // 354, 1
        if (bucketCache) {
            // 354, 20
            jamonWriter.write("\n    <tr>\n        <td>Hits per Second</td>\n        <td>");
            // 357, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bucketCacheStats.getIOHitsPerSecond()), jamonWriter);
            // 357, 56
            jamonWriter.write("</td>\n        <td>Block gets against this cache per second</td>\n    </tr>\n    <tr>\n        <td>Time per Hit</td>\n        <td>");
            // 362, 13
            org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bucketCacheStats.getIOTimePerHit()), jamonWriter);
            // 362, 53
            jamonWriter.write("</td>\n        <td>Time per cache hit</td>\n    </tr>\n");
        }
        // 365, 7
        jamonWriter.write("\n</table>\n<p>View block cache <a href=\"?format=json&bcn=");
        // 368, 47
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(name), jamonWriter);
        // 368, 57
        jamonWriter.write("\">as JSON</a> | Block cache <a href=\"?format=json&bcn=");
        // 368, 111
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(name), jamonWriter);
        // 368, 121
        jamonWriter.write("&bcv=file\">as JSON by file</a></p>\n");
        // 369, 1
        cbsbf = null;
    }

    // 167, 1
    private void __jamon_innerUnit__evictions_tmpl(final java.io.Writer jamonWriter, final BlockCache bc) throws java.io.IOException {
        // 171, 1
        AgeSnapshot ageAtEvictionSnapshot = bc.getStats().getAgeAtEvictionSnapshot();
        // Only show if non-zero mean and stddev as is the case in combinedblockcache
        // 175, 5
        jamonWriter.write("<tr>\n        <td>Evicted</td>\n        <td>");
        // 177, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getStats().getEvictedCount())), jamonWriter);
        // 177, 72
        jamonWriter.write("</td>\n        <td>The total number of blocks evicted</td>\n    </tr>\n    <tr>\n        <td>Evictions</td>\n        <td>");
        // 182, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getStats().getEvictionCount())), jamonWriter);
        // 182, 73
        jamonWriter.write("</td>\n        <td>The total number of times an eviction has occurred</td>\n    </tr>\n    <tr>\n        <td>Mean</td>\n        <td>");
        // 187, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", (long) ageAtEvictionSnapshot.getMean())), jamonWriter);
        // 187, 78
        jamonWriter.write("</td>\n        <td>Mean age of Blocks at eviction time (seconds)</td>\n    </tr>\n");
    }

    // 192, 1
    private void __jamon_innerUnit__hits_tmpl(final java.io.Writer jamonWriter, final BlockCache bc) throws java.io.IOException {
        // 196, 5
        jamonWriter.write("<tr>\n        <td>Hits</td>\n        <td>");
        // 198, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getStats().getHitCount())), jamonWriter);
        // 198, 68
        jamonWriter.write("</td>\n        <td>Number requests that were cache hits</td>\n    </tr>\n    <tr>\n        <td>Hits Caching</td>\n        <td>");
        // 203, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getStats().getHitCachingCount())), jamonWriter);
        // 203, 75
        jamonWriter.write("</td>\n        <td>Cache hit block requests but only requests set to cache block if a miss</td>\n    </tr>\n    <tr>\n        <td>Misses</td>\n        <td>");
        // 208, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getStats().getMissCount())), jamonWriter);
        // 208, 69
        jamonWriter.write("</td>\n        <td>Block requests that were cache misses but set to cache missed blocks</td>\n    </tr>\n    <tr>\n        <td>Misses Caching</td>\n        <td>");
        // 213, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,d", bc.getStats().getMissCount())), jamonWriter);
        // 213, 69
        jamonWriter.write("</td>\n        <td>Block requests that were cache misses but only requests set to use block cache</td>\n    </tr>\n    <tr>\n        <td>Hit Ratio</td>\n        <td>");
        // 218, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%,.2f", bc.getStats().getHitRatio() * 100)), jamonWriter);
        // 218, 76
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf("%"), jamonWriter);
        // 218, 85
        jamonWriter.write("</td>\n        <td>Hit Count divided by total requests count</td>\n    </tr>\n\n");
    }
}
