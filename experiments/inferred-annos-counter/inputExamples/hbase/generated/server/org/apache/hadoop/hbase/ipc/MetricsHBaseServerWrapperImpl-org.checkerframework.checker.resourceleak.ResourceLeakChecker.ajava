/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.ipc;

import org.apache.hadoop.hbase.util.DirectMemoryUtils;
import org.apache.yetus.audience.InterfaceAudience;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class MetricsHBaseServerWrapperImpl implements MetricsHBaseServerWrapper {

    private RpcServer server;

    MetricsHBaseServerWrapperImpl(RpcServer server) {
        this.server = server;
    }

    @org.checkerframework.dataflow.qual.Pure
    private boolean isServerStarted() {
        return this.server != null && this.server.isStarted();
    }

    public long getTotalQueueSize() {
        if (!isServerStarted()) {
            return 0;
        }
        return server.callQueueSizeInBytes.sum();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getGeneralQueueLength() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getGeneralQueueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getReplicationQueueLength() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getReplicationQueueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getPriorityQueueLength() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getPriorityQueueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getMetaPriorityQueueLength() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getMetaPriorityQueueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getNumOpenConnections() {
        if (!isServerStarted()) {
            return 0;
        }
        return server.getNumOpenConnections();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActiveRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActiveRpcHandlerCount();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActiveGeneralRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActiveGeneralRpcHandlerCount();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActivePriorityRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActivePriorityRpcHandlerCount();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActiveMetaPriorityRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActiveMetaPriorityRpcHandlerCount();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActiveReplicationRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActiveReplicationRpcHandlerCount();
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getNumGeneralCallsDropped() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getNumGeneralCallsDropped();
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getNumLifoModeSwitches() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getNumLifoModeSwitches();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getWriteQueueLength() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getWriteQueueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getReadQueueLength() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getReadQueueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getScanQueueLength() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getScanQueueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActiveWriteRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActiveWriteRpcHandlerCount();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActiveReadRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActiveReadRpcHandlerCount();
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getActiveScanRpcHandlerCount() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0;
        }
        return server.getScheduler().getActiveScanRpcHandlerCount();
    }

    public long getNettyDmUsage() {
        if (!isServerStarted() || this.server.getScheduler() == null) {
            return 0L;
        }
        return DirectMemoryUtils.getNettyDirectMemoryUsage();
    }
}
