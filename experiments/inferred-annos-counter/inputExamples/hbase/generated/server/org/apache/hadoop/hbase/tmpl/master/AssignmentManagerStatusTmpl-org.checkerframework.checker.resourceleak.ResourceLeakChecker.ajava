// Autogenerated Jamon proxy
// /home/narges/IntellijWS/hbase/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/AssignmentManagerStatusTmpl.jamon
package org.apache.hadoop.hbase.tmpl.master;

// 20, 1
import java.util.Map;
// 21, 1
import java.util.Set;
// 22, 1
import java.util.SortedSet;
// 23, 1
import java.util.concurrent.atomic.AtomicInteger;
// 24, 1
import java.util.stream.Collectors;
// 25, 1
import org.apache.hadoop.conf.Configuration;
// 26, 1
import org.apache.hadoop.hbase.HBaseConfiguration;
// 27, 1
import org.apache.hadoop.hbase.HConstants;
// 28, 1
import org.apache.hadoop.hbase.ServerName;
// 29, 1
import org.apache.hadoop.hbase.client.RegionInfo;
// 30, 1
import org.apache.hadoop.hbase.client.RegionInfoDisplay;
// 31, 1
import org.apache.hadoop.hbase.master.RegionState;
// 32, 1
import org.apache.hadoop.hbase.master.assignment.AssignmentManager;
// 33, 1
import org.apache.hadoop.hbase.master.assignment.AssignmentManager.RegionInTransitionStat;
// 34, 1
import org.apache.hadoop.hbase.master.assignment.RegionStates.RegionFailedOpen;
// 35, 1
import org.apache.hadoop.hbase.util.Pair;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class AssignmentManagerStatusTmpl extends org.jamon.AbstractTemplateProxy {

    public AssignmentManagerStatusTmpl(org.jamon.TemplateManager p_manager) {
        super(p_manager);
    }

    protected AssignmentManagerStatusTmpl(String p_path) {
        super(p_path);
    }

    public AssignmentManagerStatusTmpl() {
        super("/org/apache/hadoop/hbase/tmpl/master/AssignmentManagerStatusTmpl");
    }

    public interface Intf extends org.jamon.AbstractTemplateProxy.Intf {

        @org.checkerframework.dataflow.qual.SideEffectFree
        void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException;
    }

    public static class ImplData extends org.jamon.AbstractTemplateProxy.ImplData {

        // 38, 1
        public void setAssignmentManager(AssignmentManager assignmentManager) {
            // 38, 1
            m_assignmentManager = assignmentManager;
        }

        @org.checkerframework.dataflow.qual.Pure
        public AssignmentManager getAssignmentManager() {
            return m_assignmentManager;
        }

        private AssignmentManager m_assignmentManager;

        // 39, 1
        public void setLimit(int limit) {
            // 39, 1
            m_limit = limit;
            m_limit__IsNotDefault = true;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getLimit() {
            return m_limit;
        }

        private int m_limit;

        @org.checkerframework.dataflow.qual.Pure
        public boolean getLimit__IsNotDefault() {
            return m_limit__IsNotDefault;
        }

        private boolean m_limit__IsNotDefault;
    }

    protected org.jamon.AbstractTemplateProxy.ImplData makeImplData() {
        return new ImplData();
    }

    public ImplData getImplData() {
        return (ImplData) super.getImplData();
    }

    protected int limit;

    public final org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl setLimit(int p_limit) {
        (getImplData()).setLimit(p_limit);
        return this;
    }

    public org.jamon.AbstractTemplateImpl constructImpl(Class<? extends org.jamon.AbstractTemplateImpl> p_class) {
        try {
            return p_class.getConstructor(new Class[] { org.jamon.TemplateManager.class, ImplData.class }).newInstance(new Object[] { getTemplateManager(), getImplData() });
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    protected org.jamon.AbstractTemplateImpl constructImpl() {
        return new AssignmentManagerStatusTmplImpl(getTemplateManager(), getImplData());
    }

    public org.jamon.Renderer makeRenderer(final AssignmentManager assignmentManager) {
        return new org.jamon.AbstractRenderer() {

            public void renderTo(final java.io.Writer jamonWriter) throws java.io.IOException {
                render(jamonWriter, assignmentManager);
            }
        };
    }

    public void render(final java.io.Writer jamonWriter, final AssignmentManager assignmentManager) throws java.io.IOException {
        renderNoFlush(jamonWriter, assignmentManager);
        jamonWriter.flush();
    }

    public void renderNoFlush(final java.io.Writer jamonWriter, final AssignmentManager assignmentManager) throws java.io.IOException {
        ImplData implData = getImplData();
        implData.setAssignmentManager(assignmentManager);
        Intf instance = (Intf) getTemplateManager().constructImpl(this);
        instance.renderNoFlush(jamonWriter);
        reset();
    }
}
