// Autogenerated Jamon implementation
// /home/narges/IntellijWS/hbase/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/ServerMetricsTmpl.jamon
package org.apache.hadoop.hbase.tmpl.regionserver;

// 25, 1
import java.util.*;
// 26, 1
import org.apache.hadoop.hbase.regionserver.HRegionServer;
// 27, 1
import org.apache.hadoop.hbase.io.ByteBuffAllocator;
// 28, 1
import org.apache.hadoop.hbase.ipc.MetricsHBaseServerWrapper;
// 29, 1
import org.apache.hadoop.hbase.regionserver.MetricsRegionServerWrapper;
// 30, 1
import org.apache.hadoop.hbase.util.Bytes;
// 31, 1
import org.apache.hadoop.hbase.ServerName;
// 32, 1
import org.apache.hadoop.hbase.HBaseConfiguration;
// 33, 1
import org.apache.hadoop.hbase.util.DirectMemoryUtils;
// 34, 1
import org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;
// 35, 1
import java.lang.management.MemoryUsage;
// 36, 1
import org.apache.hadoop.hbase.io.util.MemorySizeUtil;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class ServerMetricsTmplImpl extends org.jamon.AbstractTemplateImpl implements org.apache.hadoop.hbase.tmpl.regionserver.ServerMetricsTmpl.Intf {

    private final MetricsRegionServerWrapper mWrap;

    private final MetricsHBaseServerWrapper mServerWrap;

    private final ByteBuffAllocator bbAllocator;

    @org.checkerframework.dataflow.qual.Pure
    protected static org.apache.hadoop.hbase.tmpl.regionserver.ServerMetricsTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.regionserver.ServerMetricsTmpl.ImplData p_implData) {
        return p_implData;
    }

    public ServerMetricsTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.regionserver.ServerMetricsTmpl.ImplData p_implData) {
        super(p_templateManager, __jamon_setOptionalArguments(p_implData));
        mWrap = p_implData.getMWrap();
        mServerWrap = p_implData.getMServerWrap();
        bbAllocator = p_implData.getBbAllocator();
    }

    public void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException {
        // 38, 1
        jamonWriter.write("<div class=\"tabbable\">\n    <ul class=\"nav nav-pills\">\n        <li class=\"active\"><a href=\"#tab_baseStats\" data-toggle=\"tab\">Base Stats</a></li>\n        <li class=\"\"><a href=\"#tab_memoryStats\" data-toggle=\"tab\">Memory</a></li>\n        <li class=\"\"><a href=\"#tab_requestStats\" data-toggle=\"tab\">Requests</a></li>\n        <li class=\"\"><a href=\"#tab_walStats\" data-toggle=\"tab\">WALs</a></li>\n        <li class=\"\"><a href=\"#tab_storeStats\" data-toggle=\"tab\">Storefiles</a></li>\n        <li class=\"\"><a href=\"#tab_queueStats\" data-toggle=\"tab\">Queues</a></li>\n        <li class=\"\"><a href=\"#tab_byteBuffAllocatorStats\" data-toggle=\"tab\">ByteBuffAllocator Stats</a></li>\n    </ul>\n    <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\n        <div class=\"tab-pane active\" id=\"tab_baseStats\">\n            ");
        // 50, 13
        {
            // 50, 13
            __jamon_innerUnit__baseStats(jamonWriter, mWrap);
        }
        // 50, 43
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_memoryStats\">\n            ");
        // 53, 13
        {
            // 53, 13
            __jamon_innerUnit__memoryStats(jamonWriter, mWrap);
        }
        // 53, 45
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_requestStats\">\n            ");
        // 56, 13
        {
            // 56, 13
            __jamon_innerUnit__requestStats(jamonWriter, mWrap);
        }
        // 56, 46
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_walStats\">\n            ");
        // 59, 13
        {
            // 59, 13
            __jamon_innerUnit__walStats(jamonWriter, mWrap);
        }
        // 59, 42
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_storeStats\">\n            ");
        // 62, 13
        {
            // 62, 13
            __jamon_innerUnit__storeStats(jamonWriter, mWrap);
        }
        // 62, 44
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_queueStats\">\n            ");
        // 65, 13
        {
            // 65, 13
            __jamon_innerUnit__queueStats(jamonWriter, mWrap, mServerWrap);
        }
        // 65, 72
        jamonWriter.write("\n        </div>\n        <div class=\"tab-pane\" id=\"tab_byteBuffAllocatorStats\">\n            ");
        // 68, 13
        {
            // 68, 13
            __jamon_innerUnit__byteBuffAllocatorStats(jamonWriter, bbAllocator);
        }
        // 68, 69
        jamonWriter.write("\n        </div>\n    </div>\n</div>\n\n");
    }

    // 73, 1
    private void __jamon_innerUnit__baseStats(final java.io.Writer jamonWriter, final MetricsRegionServerWrapper mWrap) throws java.io.IOException {
        // 77, 1
        jamonWriter.write("<table class=\"table table-striped\">\n    <tr>\n\n        <th>Requests Per Second</th>\n        <th>Num. Regions</th>\n        <th>Block locality</th>\n        <th>Block locality (Secondary replicas)</th>\n        <th>Slow WAL Append Count</th>\n    </tr>\n    <tr>\n        <td>");
        // 87, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%.0f", mWrap.getRequestsPerSecond())), jamonWriter);
        // 87, 70
        jamonWriter.write("</td>\n        <td>");
        // 88, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getNumOnlineRegions()), jamonWriter);
        // 88, 46
        jamonWriter.write("</td>\n        <td>");
        // 89, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%.3f", mWrap.getPercentFileLocal())), jamonWriter);
        // 89, 68
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf("%"), jamonWriter);
        // 89, 77
        jamonWriter.write("</td>\n        <td>");
        // 90, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%.3f", mWrap.getPercentFileLocalSecondaryRegions())), jamonWriter);
        // 90, 84
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf("%"), jamonWriter);
        // 90, 93
        jamonWriter.write("</td>\n        <td>");
        // 91, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getNumWALSlowAppend()), jamonWriter);
        // 91, 46
        jamonWriter.write("</td>\n    </tr>\n</table>\n");
    }

    // 231, 1
    private void __jamon_innerUnit__byteBuffAllocatorStats(final java.io.Writer jamonWriter, final ByteBuffAllocator bbAllocator) throws java.io.IOException {
        // 235, 1
        jamonWriter.write("<table class=\"table table-striped\">\n<tr>\n    <th>Total Heap Allocation</th>\n    <th>Total Pool Allocation</th>\n    <th>Heap Allocation Ratio</th>\n    <th>Total Buffer Count</th>\n    <th>Used Buffer Count</th>\n    <th>Buffer Size</th>\n</tr>\n<tr>\n    <td>");
        // 245, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(ByteBuffAllocator.getHeapAllocationBytes(bbAllocator, ByteBuffAllocator.HEAP), "B", 1)), jamonWriter);
        // 245, 137
        jamonWriter.write("</td>\n    <td>");
        // 246, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(bbAllocator.getPoolAllocationBytes(), "B", 1)), jamonWriter);
        // 246, 96
        jamonWriter.write("</td>\n    <td>");
        // 247, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%.3f", ByteBuffAllocator.getHeapAllocationRatio(bbAllocator, ByteBuffAllocator.HEAP) * 100)), jamonWriter);
        // 247, 121
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf("%"), jamonWriter);
        // 247, 130
        jamonWriter.write("</td>\n    <td>");
        // 248, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bbAllocator.getTotalBufferCount()), jamonWriter);
        // 248, 48
        jamonWriter.write("</td>\n    <td>");
        // 249, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bbAllocator.getUsedBufferCount()), jamonWriter);
        // 249, 47
        jamonWriter.write("</td>\n    <td>");
        // 250, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(bbAllocator.getBufferSize(), "B", 1)), jamonWriter);
        // 250, 87
        jamonWriter.write("</td>\n</tr>\n</table>\n");
    }

    // 96, 1
    private void __jamon_innerUnit__memoryStats(final java.io.Writer jamonWriter, final MetricsRegionServerWrapper mWrap) throws java.io.IOException {
        // 100, 1
        long usedHeap = -1L;
        long maxHeap = -1L;
        final MemoryUsage usage = MemorySizeUtil.safeGetHeapMemoryUsage();
        if (usage != null) {
            maxHeap = usage.getMax();
            usedHeap = usage.getUsed();
        }
        // 109, 1
        jamonWriter.write("<table class=\"table table-striped\">\n<tr>\n    <tr>\n        <th>Used Heap</th>\n        <th>Max Heap</th>\n        <th>Direct Memory Used</th>\n        <th>Direct Memory Configured</th>\n        <th>Memstore Size</th>\n        <th>Memstore Limit</th>\n    </tr>\n</tr>\n<tr>\n    <td>\n        ");
        // 122, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(usedHeap, "B", 1)), jamonWriter);
        // 122, 68
        jamonWriter.write("\n    </td>\n    <td>\n        ");
        // 125, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(maxHeap, "B", 1)), jamonWriter);
        // 125, 67
        jamonWriter.write("\n    </td>\n    <td>\n        ");
        // 128, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(DirectMemoryUtils.getDirectMemoryUsage(), "B", 1)), jamonWriter);
        // 128, 100
        jamonWriter.write("\n    </td>\n    <td>\n        ");
        // 131, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(DirectMemoryUtils.getDirectMemorySize(), "B", 1)), jamonWriter);
        // 131, 99
        jamonWriter.write("\n    </td>\n    <td>\n        ");
        // 134, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(mWrap.getMemStoreSize(), "B", 1)), jamonWriter);
        // 134, 83
        jamonWriter.write("\n    </td>\n    <td>\n        ");
        // 137, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(mWrap.getMemStoreLimit(), "B", 1)), jamonWriter);
        // 137, 84
        jamonWriter.write("\n    </td>\n</tr>\n</table>\n");
    }

    // 205, 1
    private void __jamon_innerUnit__queueStats(final java.io.Writer jamonWriter, final MetricsRegionServerWrapper mWrap, final MetricsHBaseServerWrapper mServerWrap) throws java.io.IOException {
        // 210, 1
        jamonWriter.write("<table class=\"table table-striped\">\n<tr>\n    <th>Compaction Queue Length</th>\n    <th>Flush Queue Length</th>\n    <th>Priority Call Queue Length</th>\n    <th>General Call Queue Length</th>\n    <th>Replication Call Queue Length</th>\n    <th>Total Call Queue Size</th>\n\n</tr>\n<tr>\n    <td>");
        // 221, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getCompactionQueueSize()), jamonWriter);
        // 221, 45
        jamonWriter.write("</td>\n    <td>");
        // 222, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getFlushQueueSize()), jamonWriter);
        // 222, 40
        jamonWriter.write("</td>\n    <td>");
        // 223, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mServerWrap.getPriorityQueueLength()), jamonWriter);
        // 223, 51
        jamonWriter.write("</td>\n    <td>");
        // 224, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mServerWrap.getGeneralQueueLength()), jamonWriter);
        // 224, 50
        jamonWriter.write("</td>\n    <td>");
        // 225, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mServerWrap.getReplicationQueueLength()), jamonWriter);
        // 225, 54
        jamonWriter.write("</td>\n    <td>");
        // 226, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(mServerWrap.getTotalQueueSize(), "B", 1)), jamonWriter);
        // 226, 91
        jamonWriter.write("</td>\n</tr>\n</table>\n");
    }

    // 185, 1
    private void __jamon_innerUnit__requestStats(final java.io.Writer jamonWriter, final MetricsRegionServerWrapper mWrap) throws java.io.IOException {
        // 189, 1
        jamonWriter.write("<table class=\"table table-striped\">\n<tr>\n    <th>Request Per Second</th>\n    <th>Read Request Count</th>\n    <th>Filtered Read Request Count</th>\n    <th>Write Request Count</th>\n</tr>\n<tr>\n    <td>");
        // 197, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(String.format("%.0f", mWrap.getRequestsPerSecond())), jamonWriter);
        // 197, 66
        jamonWriter.write("</td>\n    <td>");
        // 198, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getReadRequestsCount()), jamonWriter);
        // 198, 43
        jamonWriter.write("</td>\n    <td>");
        // 199, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getFilteredReadRequestsCount()), jamonWriter);
        // 199, 51
        jamonWriter.write("</td>\n    <td>");
        // 200, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getWriteRequestsCount()), jamonWriter);
        // 200, 44
        jamonWriter.write("</td>\n</tr>\n</table>\n");
    }

    // 161, 1
    private void __jamon_innerUnit__storeStats(final java.io.Writer jamonWriter, final MetricsRegionServerWrapper mWrap) throws java.io.IOException {
        // 165, 1
        jamonWriter.write("<table class=\"table table-striped\">\n<tr>\n\n    <th>Num. Stores</th>\n    <th>Num. Storefiles</th>\n    <th>Root Index Size</th>\n    <th>Index Size</th>\n    <th>Bloom Size</th>\n</tr>\n<tr>\n    <td>");
        // 175, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getNumStores()), jamonWriter);
        // 175, 35
        jamonWriter.write("</td>\n    <td>");
        // 176, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getNumStoreFiles()), jamonWriter);
        // 176, 39
        jamonWriter.write("</td>\n    <td>");
        // 177, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(mWrap.getStoreFileIndexSize(), "B", 1)), jamonWriter);
        // 177, 89
        jamonWriter.write("</td>\n    <td>");
        // 178, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(mWrap.getTotalStaticIndexSize(), "B", 1)), jamonWriter);
        // 178, 91
        jamonWriter.write("</td>\n    <td>");
        // 179, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(mWrap.getTotalStaticBloomSize(), "B", 1)), jamonWriter);
        // 179, 91
        jamonWriter.write("</td>\n</tr>\n</table>\n");
    }

    // 143, 1
    private void __jamon_innerUnit__walStats(final java.io.Writer jamonWriter, final MetricsRegionServerWrapper mWrap) throws java.io.IOException {
        // 147, 1
        jamonWriter.write("<table class=\"table table-striped\">\n<tr>\n    <tr>\n        <th>Num. WAL Files</th>\n        <th>Size. WAL Files</th>\n    </tr>\n</tr>\n<tr>\n    <td>");
        // 155, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(mWrap.getNumWALFiles()), jamonWriter);
        // 155, 37
        jamonWriter.write("</td>\n    <td>");
        // 156, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(TraditionalBinaryPrefix.long2String(mWrap.getWALFileSize(), "B", 1)), jamonWriter);
        // 156, 82
        jamonWriter.write("</td>\n</tr>\n</table>\n");
    }
}
