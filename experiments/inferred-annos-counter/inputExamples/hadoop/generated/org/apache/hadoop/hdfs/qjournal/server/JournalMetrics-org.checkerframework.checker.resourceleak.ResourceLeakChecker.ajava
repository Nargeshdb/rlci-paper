/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hdfs.qjournal.server;

import java.io.IOException;
import org.apache.hadoop.metrics2.annotation.Metric;
import org.apache.hadoop.metrics2.annotation.Metrics;
import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;
import org.apache.hadoop.metrics2.lib.MetricsRegistry;
import org.apache.hadoop.metrics2.lib.MutableCounterLong;
import org.apache.hadoop.metrics2.lib.MutableQuantiles;
import org.apache.hadoop.metrics2.lib.MutableStat;

/**
 * The server-side metrics for a journal from the JournalNode's
 * perspective.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
class JournalMetrics {

    final MetricsRegistry registry = new MetricsRegistry("JournalNode");

    MutableCounterLong batchesWritten;

    MutableCounterLong txnsWritten;

    MutableCounterLong bytesWritten;

    MutableCounterLong txnsServedViaRpc;

    MutableCounterLong bytesServedViaRpc;

    MutableStat rpcRequestCacheMissAmount = new MutableStat("RpcRequestCacheMissAmount", "Number of RPC requests unable to be served due to lack of availability in cache, and how many transactions away the request was from being in the cache.", "Misses", "Txns");

    MutableCounterLong rpcEmptyResponses;

    MutableCounterLong batchesWrittenWhileLagging;

    private MutableCounterLong numEditLogsSynced;

    private final int[] QUANTILE_INTERVALS = new int[] { // 1m
    1 * 60, // 5m
    5 * 60, // 1h
    60 * 60 };

    final MutableQuantiles[] syncsQuantiles;

    private final Journal journal;

    JournalMetrics(Journal journal) {
        this.journal = journal;
        syncsQuantiles = new MutableQuantiles[QUANTILE_INTERVALS.length];
        for (int i = 0; i < syncsQuantiles.length; i++) {
            int interval = QUANTILE_INTERVALS[i];
            syncsQuantiles[i] = registry.newQuantiles("syncs" + interval + "s", "Journal sync time", "ops", "latencyMicros", interval);
        }
    }

    public static JournalMetrics create(Journal j) {
        JournalMetrics m = new JournalMetrics(j);
        return DefaultMetricsSystem.instance().register(m.getName(), null, m);
    }

    @org.checkerframework.dataflow.qual.Pure
    String getName() {
        return "Journal-" + journal.getJournalId();
    }

    public long getLastWriterEpoch() {
        try {
            return journal.getLastWriterEpoch();
        } catch (IOException e) {
            return -1L;
        }
    }

    public long getLastPromisedEpoch() {
        try {
            return journal.getLastPromisedEpoch();
        } catch (IOException e) {
            return -1L;
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getLastWrittenTxId() {
        return journal.getHighestWrittenTxId();
    }

    public long getCurrentLagTxns() {
        try {
            return journal.getCurrentLagTxns();
        } catch (IOException e) {
            return -1L;
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getLastJournalTimestamp() {
        return journal.getLastJournalTimestamp();
    }

    void addSync(long us) {
        for (MutableQuantiles q : syncsQuantiles) {
            q.add(us);
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public MutableCounterLong getNumEditLogsSynced() {
        return numEditLogsSynced;
    }

    public void incrNumEditLogsSynced() {
        numEditLogsSynced.incr();
    }
}
