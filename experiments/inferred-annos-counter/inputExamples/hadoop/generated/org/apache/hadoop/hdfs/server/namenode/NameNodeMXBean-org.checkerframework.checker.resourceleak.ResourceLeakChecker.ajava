/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hdfs.server.namenode;

import java.util.Map;
import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;
import org.apache.hadoop.hdfs.protocol.RollingUpgradeInfo;

/**
 * This is the JMX management interface for namenode information.
 * End users shouldn't be implementing these interfaces, and instead
 * access this information through the JMX APIs.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public interface NameNodeMXBean {

    /**
     * Gets the version of Hadoop.
     *
     * @return the version.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getVersion();

    /**
     * Get the version of software running on the Namenode.
     *
     * @return a string representing the version.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getSoftwareVersion();

    /**
     * Gets the used space by data nodes.
     *
     * @return the used space by data nodes.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getUsed();

    /**
     * Gets total non-used raw bytes.
     *
     * @return total non-used raw bytes.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getFree();

    /**
     * Gets total raw bytes including non-dfs used space.
     *
     * @return the total raw bytes including non-dfs used space.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getTotal();

    /**
     * Gets capacity of the provided storage mounted, in bytes.
     *
     * @return the total raw bytes present in the provided storage.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getProvidedCapacity();

    /**
     * Gets the safemode status.
     *
     * @return the safemode status.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getSafemode();

    /**
     * Checks if upgrade is finalized.
     *
     * @return true, if upgrade is finalized.
     */
    @org.checkerframework.dataflow.qual.Pure
    boolean isUpgradeFinalized();

    /**
     * Gets the RollingUpgrade information.
     *
     * @return Rolling upgrade information if an upgrade is in progress. Else
     * (e.g. if there is no upgrade or the upgrade is finalized), returns null.
     */
    @org.checkerframework.dataflow.qual.Pure
    RollingUpgradeInfo.Bean getRollingUpgradeStatus();

    /**
     * Gets total used space by data nodes for non DFS purposes such as storing
     * temporary files on the local file system.
     *
     * @return the non dfs space of the cluster.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getNonDfsUsedSpace();

    /**
     * Gets the total used space by data nodes as percentage of total capacity.
     *
     * @return the percentage of used space on the cluster.
     */
    @org.checkerframework.dataflow.qual.Pure
    float getPercentUsed();

    /**
     * Gets the total remaining space by data nodes as percentage of total
     * capacity.
     *
     * @return the percentage of the remaining space on the cluster.
     */
    @org.checkerframework.dataflow.qual.Pure
    float getPercentRemaining();

    /**
     * Gets the amount of cache used by the datanode (in bytes).
     *
     * @return the amount of cache used by the datanode (in bytes).
     */
    @org.checkerframework.dataflow.qual.Pure
    long getCacheUsed();

    /**
     * Gets the total cache capacity of the datanode (in bytes).
     *
     * @return the total cache capacity of the datanode (in bytes).
     */
    @org.checkerframework.dataflow.qual.Pure
    long getCacheCapacity();

    /**
     * Get the total space used by the block pools of this namenode.
     *
     * @return the total space used by the block pools of this namenode.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getBlockPoolUsedSpace();

    /**
     * Get the total space used by the block pool as percentage of total capacity.
     *
     * @return the total space used by the block pool as percentage of total
     * capacity.
     */
    @org.checkerframework.dataflow.qual.Pure
    float getPercentBlockPoolUsed();

    /**
     * Gets the total numbers of blocks on the cluster.
     *
     * @return the total number of blocks of the cluster.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getTotalBlocks();

    /**
     * Gets the total number of missing blocks on the cluster.
     *
     * @return the total number of missing blocks on the cluster.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getNumberOfMissingBlocks();

    /**
     * Gets the total number of missing blocks on the cluster with
     * replication factor 1.
     *
     * @return the total number of missing blocks on the cluster with
     * replication factor 1.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getNumberOfMissingBlocksWithReplicationFactorOne();

    /**
     * Gets the total number of replicated low redundancy blocks on the cluster
     * with the highest risk of loss.
     *
     * @return the total number of low redundancy blocks on the cluster
     * with the highest risk of loss.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getHighestPriorityLowRedundancyReplicatedBlocks();

    /**
     * Gets the total number of erasure coded low redundancy blocks on the cluster
     * with the highest risk of loss.
     *
     * @return the total number of low redundancy blocks on the cluster
     * with the highest risk of loss.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getHighestPriorityLowRedundancyECBlocks();

    /**
     * Gets the total number of snapshottable dirs in the system.
     *
     * @return the total number of snapshottable dirs in the system.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getNumberOfSnapshottableDirs();

    /**
     * Gets the number of threads.
     *
     * @return the number of threads.
     */
    @org.checkerframework.dataflow.qual.Pure
    int getThreads();

    /**
     * Gets the live node information of the cluster.
     *
     * @return the live node information.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getLiveNodes();

    /**
     * Gets the dead node information of the cluster.
     *
     * @return the dead node information.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getDeadNodes();

    /**
     * Gets the decommissioning node information of the cluster.
     *
     * @return the decommissioning node information.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getDecomNodes();

    /**
     * Gets the information on nodes entering maintenance.
     *
     * @return the information on nodes entering maintenance.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getEnteringMaintenanceNodes();

    /**
     * Gets the cluster id.
     *
     * @return the cluster id.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getClusterId();

    /**
     * Gets the block pool id.
     *
     * @return the block pool id.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getBlockPoolId();

    /**
     * Get status information about the directories storing image and edits logs
     * of the NN.
     *
     * @return the name dir status information, as a JSON string.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getNameDirStatuses();

    /**
     * Get Max, Median, Min and Standard Deviation of DataNodes usage.
     *
     * @return the DataNode usage information, as a JSON string.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getNodeUsage();

    /**
     * Get status information about the journals of the NN.
     *
     * @return the name journal status information, as a JSON string.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getNameJournalStatus();

    /**
     * Get information about the transaction ID, including the last applied
     * transaction ID and the most recent checkpoint's transaction ID.
     *
     * @return information about the transaction ID.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getJournalTransactionInfo();

    /**
     * Gets the NN start time in milliseconds.
     *
     * @return the NN start time in msec.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getNNStartedTimeInMillis();

    /**
     * Get the compilation information which contains date, user and branch.
     *
     * @return the compilation information, as a JSON string.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getCompileInfo();

    /**
     * Get the list of corrupt files.
     *
     * @return the list of corrupt files, as a JSON string.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getCorruptFiles();

    /**
     * Get the length of the list of corrupt files.
     *
     * @return the length of the list of corrupt files.
     */
    @org.checkerframework.dataflow.qual.Pure
    int getCorruptFilesCount();

    /**
     * Get the number of distinct versions of live datanodes.
     *
     * @return the number of distinct versions of live datanodes.
     */
    @org.checkerframework.dataflow.qual.Pure
    int getDistinctVersionCount();

    /**
     * Get the number of live datanodes for each distinct versions.
     *
     * @return the number of live datanodes for each distinct versions.
     */
    @org.checkerframework.dataflow.qual.Pure
    Map<String, Integer> getDistinctVersions();

    /**
     * Get namenode directory size.
     *
     * @return namenode directory size.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getNameDirSize();

    /**
     * Verifies whether the cluster setup can support all enabled EC policies.
     *
     * @return the result of the verification.
     */
    @org.checkerframework.dataflow.qual.Pure
    String getVerifyECWithTopologyResult();
}
