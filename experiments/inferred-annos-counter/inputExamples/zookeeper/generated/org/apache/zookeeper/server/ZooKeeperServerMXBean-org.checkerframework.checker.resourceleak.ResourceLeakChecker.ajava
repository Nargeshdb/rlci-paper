/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.zookeeper.server;

/**
 * ZooKeeper server MBean.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public interface ZooKeeperServerMXBean {

    /**
     * @return the server socket port number
     */
    @org.checkerframework.dataflow.qual.Pure
    String getClientPort();

    /**
     * @return the zookeeper server version
     */
    @org.checkerframework.dataflow.qual.Pure
    String getVersion();

    /**
     * @return time the server was started
     */
    @org.checkerframework.dataflow.qual.Pure
    String getStartTime();

    /**
     * @return min request latency in ms
     */
    @org.checkerframework.dataflow.qual.Pure
    long getMinRequestLatency();

    /**
     * @return average request latency in ms
     */
    @org.checkerframework.dataflow.qual.Pure
    double getAvgRequestLatency();

    /**
     * @return max request latency in ms
     */
    @org.checkerframework.dataflow.qual.Pure
    long getMaxRequestLatency();

    /**
     * @return number of packets received so far
     */
    @org.checkerframework.dataflow.qual.Pure
    long getPacketsReceived();

    /**
     * @return number of packets sent so far
     */
    @org.checkerframework.dataflow.qual.Pure
    long getPacketsSent();

    /**
     * @return number of fsync threshold exceeds so far
     */
    @org.checkerframework.dataflow.qual.Pure
    long getFsyncThresholdExceedCount();

    /**
     * @return number of outstanding requests.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getOutstandingRequests();

    /**
     * Current TickTime of server in milliseconds
     */
    @org.checkerframework.dataflow.qual.Pure
    int getTickTime();

    /**
     * Set TickTime of server in milliseconds
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void setTickTime(int tickTime);

    /**
     * Current maxClientCnxns allowed from a particular host
     */
    @org.checkerframework.dataflow.qual.Pure
    int getMaxClientCnxnsPerHost();

    /**
     * Set maxClientCnxns allowed from a particular host
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void setMaxClientCnxnsPerHost(int max);

    /**
     * Current minSessionTimeout of the server in milliseconds
     */
    @org.checkerframework.dataflow.qual.Pure
    int getMinSessionTimeout();

    /**
     * Set minSessionTimeout of server in milliseconds
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void setMinSessionTimeout(int min);

    /**
     * Current maxSessionTimeout of the server in milliseconds
     */
    @org.checkerframework.dataflow.qual.Pure
    int getMaxSessionTimeout();

    /**
     * Set maxSessionTimeout of server in milliseconds
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void setMaxSessionTimeout(int max);

    @org.checkerframework.dataflow.qual.Pure
    boolean getResponseCachingEnabled();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setResponseCachingEnabled(boolean isEnabled);

    /* Connection throttling settings */
    @org.checkerframework.dataflow.qual.Pure
    int getConnectionMaxTokens();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setConnectionMaxTokens(int val);

    @org.checkerframework.dataflow.qual.Pure
    int getConnectionTokenFillTime();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setConnectionTokenFillTime(int val);

    @org.checkerframework.dataflow.qual.Pure
    int getConnectionTokenFillCount();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setConnectionTokenFillCount(int val);

    @org.checkerframework.dataflow.qual.Pure
    int getConnectionFreezeTime();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setConnectionFreezeTime(int val);

    @org.checkerframework.dataflow.qual.Pure
    double getConnectionDropIncrease();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setConnectionDropIncrease(double val);

    @org.checkerframework.dataflow.qual.Pure
    double getConnectionDropDecrease();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setConnectionDropDecrease(double val);

    @org.checkerframework.dataflow.qual.Pure
    double getConnectionDecreaseRatio();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setConnectionDecreaseRatio(double val);

    @org.checkerframework.dataflow.qual.Pure
    int getCommitProcMaxReadBatchSize();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setCommitProcMaxReadBatchSize(int size);

    @org.checkerframework.dataflow.qual.Pure
    int getCommitProcMaxCommitBatchSize();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setCommitProcMaxCommitBatchSize(int size);

    @org.checkerframework.dataflow.qual.Pure
    int getRequestThrottleLimit();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setRequestThrottleLimit(int requests);

    @org.checkerframework.dataflow.qual.Pure
    int getRequestThrottleStallTime();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setRequestThrottleStallTime(int time);

    @org.checkerframework.dataflow.qual.Pure
    boolean getRequestThrottleDropStale();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setRequestThrottleDropStale(boolean drop);

    @org.checkerframework.dataflow.qual.Pure
    int getThrottledOpWaitTime();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setThrottledOpWaitTime(int val);

    @org.checkerframework.dataflow.qual.Pure
    boolean getRequestStaleLatencyCheck();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setRequestStaleLatencyCheck(boolean check);

    @org.checkerframework.dataflow.qual.Pure
    boolean getRequestStaleConnectionCheck();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setRequestStaleConnectionCheck(boolean check);

    @org.checkerframework.dataflow.qual.Pure
    int getLargeRequestMaxBytes();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setLargeRequestMaxBytes(int bytes);

    @org.checkerframework.dataflow.qual.Pure
    int getLargeRequestThreshold();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setLargeRequestThreshold(int threshold);

    /**
     * Reset packet and latency statistics
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void resetStatistics();

    /**
     * Reset min/avg/max latency statistics
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void resetLatency();

    /**
     * Reset max latency statistics only.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void resetMaxLatency();

    /**
     * Reset Fsync Threshold Exceed Count statistics only.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void resetFsyncThresholdExceedCount();

    /**
     * @return number of alive client connections
     */
    @org.checkerframework.dataflow.qual.Pure
    long getNumAliveConnections();

    /**
     * @return estimated size of data directory in bytes
     */
    @org.checkerframework.dataflow.qual.Pure
    long getDataDirSize();

    /**
     * @return estimated size of log directory in bytes
     */
    @org.checkerframework.dataflow.qual.Pure
    long getLogDirSize();

    /**
     * @return secure client port
     */
    @org.checkerframework.dataflow.qual.Pure
    String getSecureClientPort();

    /**
     * @return secure client address
     */
    @org.checkerframework.dataflow.qual.Pure
    String getSecureClientAddress();

    /**
     * Returns the elapsed sync of time of transaction log in milliseconds.
     */
    @org.checkerframework.dataflow.qual.Pure
    long getTxnLogElapsedSyncTime();

    /**
     * @return Returns the value of the following config setting: jute.maxbuffer
     */
    @org.checkerframework.dataflow.qual.Pure
    int getJuteMaxBufferSize();

    /**
     * @return size of latest generated client response
     */
    @org.checkerframework.dataflow.qual.Pure
    int getLastClientResponseSize();

    /**
     * @return size of smallest generated client response
     */
    @org.checkerframework.dataflow.qual.Pure
    int getMinClientResponseSize();

    /**
     * @return size of largest generated client response
     */
    @org.checkerframework.dataflow.qual.Pure
    int getMaxClientResponseSize();

    @org.checkerframework.dataflow.qual.Pure
    long getFlushDelay();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setFlushDelay(long delay);

    @org.checkerframework.dataflow.qual.Pure
    long getMaxWriteQueuePollTime();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setMaxWriteQueuePollTime(long delay);

    @org.checkerframework.dataflow.qual.Pure
    int getMaxBatchSize();

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setMaxBatchSize(int size);

    /**
     * @return Current maxCnxns allowed to a single ZooKeeper server
     */
    @org.checkerframework.dataflow.qual.Pure
    int getMaxCnxns();
}
