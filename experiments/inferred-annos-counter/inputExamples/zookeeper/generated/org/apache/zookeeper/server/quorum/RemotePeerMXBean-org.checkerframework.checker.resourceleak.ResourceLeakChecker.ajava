/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.zookeeper.server.quorum;

/**
 * A proxy for a remote quorum peer.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public interface RemotePeerMXBean {

    /**
     * @return name of the peer
     */
    @org.checkerframework.dataflow.qual.Pure
    String getName();

    /**
     * @return IP address of the quorum peer
     */
    @org.checkerframework.dataflow.qual.Pure
    String getQuorumAddress();

    /**
     * @return the election address
     */
    @org.checkerframework.dataflow.qual.Pure
    String getElectionAddress();

    /**
     * @return the client address
     */
    @org.checkerframework.dataflow.qual.Pure
    String getClientAddress();

    /**
     * @return the learner type
     */
    @org.checkerframework.dataflow.qual.Pure
    String getLearnerType();

    /**
     * @return true if the peer is the current leader
     */
    @org.checkerframework.dataflow.qual.Pure
    boolean isLeader();
}
