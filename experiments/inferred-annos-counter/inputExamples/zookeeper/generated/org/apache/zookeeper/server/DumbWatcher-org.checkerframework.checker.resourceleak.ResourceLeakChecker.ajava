/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.zookeeper.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.security.cert.Certificate;
import org.apache.jute.Record;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.data.Stat;
import org.apache.zookeeper.proto.ReplyHeader;

/**
 * A empty watcher implementation used in bench and unit test.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class DumbWatcher extends ServerCnxn {

    private long sessionId;

    public DumbWatcher() {
        this(0);
    }

    public DumbWatcher(long sessionId) {
        super(null);
        this.sessionId = sessionId;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setSessionTimeout(int sessionTimeout) {
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void process(WatchedEvent event) {
    }

    @org.checkerframework.dataflow.qual.Pure
    int getSessionTimeout() {
        return 0;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void close(DisconnectReason reason) {
    }

    @org.checkerframework.dataflow.qual.Pure
    public int sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat, int opCode) throws IOException {
        return 0;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void sendCloseSession() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getSessionId() {
        return sessionId;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    void setSessionId(long sessionId) {
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    void sendBuffer(ByteBuffer... closeConn) {
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    void enableRecv() {
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    void disableRecv(boolean waitDisableRecv) {
    }

    @org.checkerframework.dataflow.qual.Pure
    protected ServerStats serverStats() {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public long getOutstandingRequests() {
        return 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    public InetSocketAddress getRemoteSocketAddress() {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getInterestOps() {
        return 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isSecure() {
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Certificate[] getClientCertificateChain() {
        return null;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void setClientCertificateChain(Certificate[] chain) {
    }
}
